package parser

// Code generated by peg -switch -inline -output state_diagram.gen.go state_diagram.peg DO NOT EDIT.

import (
	"fmt"
	"github.com/timickb/go-stateflow/internal/domain"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleStateDiagram
	ruleidentifier
	ruleanyChar
	ruleanySequence
	ruleNL
	ruleSP
	ruleWord
	ruleTag
	ruleDuration
	ruleTitle
	ruleName
	ruleVersion
	ruleHideEmptyDescription
	ruleTheme
	ruleSkinparam
	ruleStateSkin
	ruleVar
	ruleComment
	ruleStart
	ruleEnd
	ruleArr
	ruleDoubleArr
	ruleTripleArr
	ruleDirectionArr
	ruleBackArr
	ruleDoubleBackArr
	ruleTripleBackArr
	ruleDirectionBackArr
	ruleArrow
	ruleBackArrow
	ruleDirection
	ruleTerminalState
	ruleStateFrom
	ruleStateTo
	ruleStateName
	ruleDelay
	rulecontextVarPath
	ruleParamName
	ruleParamValue
	ruleParamValueFromContext
	ruleParam
	ruleHandlerName
	ruleEventName
	ruleState
	ruleTransition
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleTermState
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruletag
	ruleHandler
	ruleAction17
	rulesp
	ruleAction18
)

var rul3s = [...]string{
	"Unknown",
	"StateDiagram",
	"identifier",
	"anyChar",
	"anySequence",
	"NL",
	"SP",
	"Word",
	"Tag",
	"Duration",
	"Title",
	"Name",
	"Version",
	"HideEmptyDescription",
	"Theme",
	"Skinparam",
	"StateSkin",
	"Var",
	"Comment",
	"Start",
	"End",
	"Arr",
	"DoubleArr",
	"TripleArr",
	"DirectionArr",
	"BackArr",
	"DoubleBackArr",
	"TripleBackArr",
	"DirectionBackArr",
	"Arrow",
	"BackArrow",
	"Direction",
	"TerminalState",
	"StateFrom",
	"StateTo",
	"StateName",
	"Delay",
	"contextVarPath",
	"ParamName",
	"ParamValue",
	"ParamValueFromContext",
	"Param",
	"HandlerName",
	"EventName",
	"State",
	"Transition",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"TermState",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"tag",
	"Handler",
	"Action17",
	"sp",
	"Action18",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type StateDiagram struct {
	States
	Transitions

	Name    string
	Title   string
	Version string

	word           string
	tags           []string
	params         map[string]domain.StateParamValue
	stateFrom      string
	stateTo        string
	stateName      string
	eventName      string
	handlerName    string
	paramName      string
	paramValue     string
	contextVarPath string
	delay          string

	Buffer string
	buffer []rune
	rules  [70]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *StateDiagram) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *StateDiagram) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *StateDiagram
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *StateDiagram) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *StateDiagram) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *StateDiagram) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *StateDiagram) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.word = text
		case ruleAction1:
			p.AddTag(text)
		case ruleAction2:
			p.Title = text
		case ruleAction3:
			p.Name = text
		case ruleAction4:
			p.setVersion(text)
		case ruleAction5:
			p.stateFrom = "START"
		case ruleAction6:
			p.stateFrom = p.word
		case ruleAction7:
			p.stateTo = "END"
		case ruleAction8:
			p.stateTo = p.word
		case ruleAction9:
			p.stateName = p.word
		case ruleAction10:
			p.delay = text
		case ruleAction11:
			p.paramName = text
		case ruleAction12:
			p.paramValue = text
		case ruleAction13:
			p.contextVarPath = text
		case ruleAction14:
			p.appendParam()
		case ruleAction15:
			p.handlerName = text
		case ruleAction16:
			p.eventName = text
		case ruleAction17:

			dto := &AddStateDto{
				StateName: p.stateName,
				Handler:   p.handlerName,
				Params:    p.params,
			}
			p.AddState(dto)
			p.clearState()

		case ruleAction18:

			dto := &AddTransitionDto{
				StateFrom: p.stateFrom,
				StateTo:   p.stateTo,
				Event:     p.eventName,
			}
			p.AddTransition(dto)
			p.clearState()

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*StateDiagram) error {
	return func(p *StateDiagram) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*StateDiagram) error {
	return func(p *StateDiagram) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *StateDiagram) Init(options ...func(*StateDiagram) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 StateDiagram <- <(Start (Version / Name / Transition / StateSkin / State / Theme / ((&('\'') Comment) | (&('!') Var) | (&('s') Skinparam) | (&('h') HideEmptyDescription) | (&('t') Title)))* End !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2 := position
					if buffer[position] != rune('@') {
						goto l0
					}
					position++
					if buffer[position] != rune('s') {
						goto l0
					}
					position++
					if buffer[position] != rune('t') {
						goto l0
					}
					position++
					if buffer[position] != rune('a') {
						goto l0
					}
					position++
					if buffer[position] != rune('r') {
						goto l0
					}
					position++
					if buffer[position] != rune('t') {
						goto l0
					}
					position++
					if buffer[position] != rune('u') {
						goto l0
					}
					position++
					if buffer[position] != rune('m') {
						goto l0
					}
					position++
					if buffer[position] != rune('l') {
						goto l0
					}
					position++
					if !_rules[ruleNL]() {
						goto l0
					}
					add(ruleStart, position2)
				}
			l3:
				{
					position4, tokenIndex4 := position, tokenIndex
					{
						position5, tokenIndex5 := position, tokenIndex
						{
							position7 := position
							if buffer[position] != rune('!') {
								goto l6
							}
							position++
							if buffer[position] != rune('$') {
								goto l6
							}
							position++
							if buffer[position] != rune('v') {
								goto l6
							}
							position++
							if buffer[position] != rune('e') {
								goto l6
							}
							position++
							if buffer[position] != rune('r') {
								goto l6
							}
							position++
							if buffer[position] != rune('s') {
								goto l6
							}
							position++
							if buffer[position] != rune('i') {
								goto l6
							}
							position++
							if buffer[position] != rune('o') {
								goto l6
							}
							position++
							if buffer[position] != rune('n') {
								goto l6
							}
							position++
							if !_rules[ruleSP]() {
								goto l6
							}
							if buffer[position] != rune('=') {
								goto l6
							}
							position++
							if !_rules[ruleSP]() {
								goto l6
							}
							{
								position8, tokenIndex8 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l8
								}
								position++
								goto l9
							l8:
								position, tokenIndex = position8, tokenIndex8
							}
						l9:
							{
								position10 := position
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l6
								}
								position++
							l11:
								{
									position12, tokenIndex12 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l12
									}
									position++
									goto l11
								l12:
									position, tokenIndex = position12, tokenIndex12
								}
								if !matchDot() {
									goto l6
								}
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l6
								}
								position++
							l13:
								{
									position14, tokenIndex14 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l14
									}
									position++
									goto l13
								l14:
									position, tokenIndex = position14, tokenIndex14
								}
								add(rulePegText, position10)
							}
							{
								position15, tokenIndex15 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l15
								}
								position++
								goto l16
							l15:
								position, tokenIndex = position15, tokenIndex15
							}
						l16:
							if !_rules[ruleNL]() {
								goto l6
							}
							{
								add(ruleAction4, position)
							}
							add(ruleVersion, position7)
						}
						goto l5
					l6:
						position, tokenIndex = position5, tokenIndex5
						{
							position19 := position
							if buffer[position] != rune('!') {
								goto l18
							}
							position++
							if buffer[position] != rune('$') {
								goto l18
							}
							position++
							if buffer[position] != rune('n') {
								goto l18
							}
							position++
							if buffer[position] != rune('a') {
								goto l18
							}
							position++
							if buffer[position] != rune('m') {
								goto l18
							}
							position++
							if buffer[position] != rune('e') {
								goto l18
							}
							position++
							if !_rules[ruleSP]() {
								goto l18
							}
							if buffer[position] != rune('=') {
								goto l18
							}
							position++
							if !_rules[ruleSP]() {
								goto l18
							}
							if buffer[position] != rune('"') {
								goto l18
							}
							position++
							{
								position20 := position
								if !_rules[ruleanySequence]() {
									goto l18
								}
								add(rulePegText, position20)
							}
							if buffer[position] != rune('"') {
								goto l18
							}
							position++
							if !_rules[ruleNL]() {
								goto l18
							}
							{
								add(ruleAction3, position)
							}
							add(ruleName, position19)
						}
						goto l5
					l18:
						position, tokenIndex = position5, tokenIndex5
						{
							position23 := position
							{
								position24, tokenIndex24 := position, tokenIndex
								if !_rules[ruleStateFrom]() {
									goto l25
								}
								if !_rules[ruleSP]() {
									goto l25
								}
								{
									position26 := position
									{
										position27, tokenIndex27 := position, tokenIndex
										if !_rules[ruleArr]() {
											goto l28
										}
										goto l27
									l28:
										position, tokenIndex = position27, tokenIndex27
										if !_rules[ruleDoubleArr]() {
											goto l29
										}
										goto l27
									l29:
										position, tokenIndex = position27, tokenIndex27
										{
											position31 := position
											if buffer[position] != rune('-') {
												goto l30
											}
											position++
											if !_rules[ruleDoubleArr]() {
												goto l30
											}
											add(ruleTripleArr, position31)
										}
										goto l27
									l30:
										position, tokenIndex = position27, tokenIndex27
										{
											position32 := position
											if buffer[position] != rune('-') {
												goto l25
											}
											position++
											if !_rules[ruleDirection]() {
												goto l25
											}
											if !_rules[ruleArr]() {
												goto l25
											}
											add(ruleDirectionArr, position32)
										}
									}
								l27:
									add(ruleArrow, position26)
								}
								if !_rules[ruleSP]() {
									goto l25
								}
								if !_rules[ruleStateTo]() {
									goto l25
								}
								goto l24
							l25:
								position, tokenIndex = position24, tokenIndex24
								if !_rules[ruleStateTo]() {
									goto l22
								}
								if !_rules[ruleSP]() {
									goto l22
								}
								{
									position33 := position
									{
										position34, tokenIndex34 := position, tokenIndex
										if !_rules[ruleBackArr]() {
											goto l35
										}
										goto l34
									l35:
										position, tokenIndex = position34, tokenIndex34
										if !_rules[ruleDoubleBackArr]() {
											goto l36
										}
										goto l34
									l36:
										position, tokenIndex = position34, tokenIndex34
										{
											position38 := position
											if !_rules[ruleDoubleBackArr]() {
												goto l37
											}
											if buffer[position] != rune('-') {
												goto l37
											}
											position++
											add(ruleTripleBackArr, position38)
										}
										goto l34
									l37:
										position, tokenIndex = position34, tokenIndex34
										{
											position39 := position
											if !_rules[ruleBackArr]() {
												goto l22
											}
											if !_rules[ruleDirection]() {
												goto l22
											}
											if buffer[position] != rune('-') {
												goto l22
											}
											position++
											add(ruleDirectionBackArr, position39)
										}
									}
								l34:
									add(ruleBackArrow, position33)
								}
								if !_rules[ruleSP]() {
									goto l22
								}
								if !_rules[ruleStateFrom]() {
									goto l22
								}
							}
						l24:
							if !_rules[ruleSP]() {
								goto l22
							}
							{
								position40, tokenIndex40 := position, tokenIndex
								if buffer[position] != rune(':') {
									goto l40
								}
								position++
								{
									position42 := position
									add(rulesp, position42)
								}
								{
									position43 := position
									if buffer[position] != rune('[') {
										goto l40
									}
									position++
									{
										position44 := position
										if !_rules[ruleidentifier]() {
											goto l40
										}
										add(rulePegText, position44)
									}
									if buffer[position] != rune(']') {
										goto l40
									}
									position++
									{
										add(ruleAction16, position)
									}
									add(ruleEventName, position43)
								}
								goto l41
							l40:
								position, tokenIndex = position40, tokenIndex40
							}
						l41:
							if !_rules[ruleNL]() {
								goto l22
							}
							{
								add(ruleAction18, position)
							}
							add(ruleTransition, position23)
						}
						goto l5
					l22:
						position, tokenIndex = position5, tokenIndex5
						{
							position48 := position
							if buffer[position] != rune('s') {
								goto l47
							}
							position++
							if buffer[position] != rune('t') {
								goto l47
							}
							position++
							if buffer[position] != rune('a') {
								goto l47
							}
							position++
							if buffer[position] != rune('t') {
								goto l47
							}
							position++
							if buffer[position] != rune('e') {
								goto l47
							}
							position++
							if !_rules[ruleSP]() {
								goto l47
							}
							if !_rules[ruleStateName]() {
								goto l47
							}
							if !_rules[ruleSP]() {
								goto l47
							}
							if buffer[position] != rune('#') {
								goto l47
							}
							position++
							if !_rules[ruleanyChar]() {
								goto l47
							}
						l49:
							{
								position50, tokenIndex50 := position, tokenIndex
								if !_rules[ruleanyChar]() {
									goto l50
								}
								goto l49
							l50:
								position, tokenIndex = position50, tokenIndex50
							}
							if !_rules[ruleNL]() {
								goto l47
							}
							add(ruleStateSkin, position48)
						}
						goto l5
					l47:
						position, tokenIndex = position5, tokenIndex5
						{
							position52 := position
							if buffer[position] != rune('s') {
								goto l51
							}
							position++
							if buffer[position] != rune('t') {
								goto l51
							}
							position++
							if buffer[position] != rune('a') {
								goto l51
							}
							position++
							if buffer[position] != rune('t') {
								goto l51
							}
							position++
							if buffer[position] != rune('e') {
								goto l51
							}
							position++
							if !_rules[ruleSP]() {
								goto l51
							}
							if !_rules[ruleStateName]() {
								goto l51
							}
							if !_rules[ruleSP]() {
								goto l51
							}
						l53:
							{
								position54, tokenIndex54 := position, tokenIndex
								{
									position55 := position
									add(ruletag, position55)
								}
								{
									position56, tokenIndex56 := position, tokenIndex
									if !_rules[ruleSP]() {
										goto l56
									}
									goto l57
								l56:
									position, tokenIndex = position56, tokenIndex56
								}
							l57:
								goto l53

								position, tokenIndex = position54, tokenIndex54
							}
							if !_rules[ruleSP]() {
								goto l51
							}
							{
								position58, tokenIndex58 := position, tokenIndex
								if buffer[position] != rune(':') {
									goto l58
								}
								position++
								if !_rules[ruleSP]() {
									goto l58
								}
								{
									position60, tokenIndex60 := position, tokenIndex
									{
										position62 := position
										if buffer[position] != rune('d') {
											goto l61
										}
										position++
										if buffer[position] != rune('e') {
											goto l61
										}
										position++
										if buffer[position] != rune('l') {
											goto l61
										}
										position++
										if buffer[position] != rune('a') {
											goto l61
										}
										position++
										if buffer[position] != rune('y') {
											goto l61
										}
										position++
										if buffer[position] != rune('=') {
											goto l61
										}
										position++
										{
											position63 := position
											{
												position64 := position
												if c := buffer[position]; c < rune('0') || c > rune('9') {
													goto l61
												}
												position++
											l65:
												{
													position66, tokenIndex66 := position, tokenIndex
													if c := buffer[position]; c < rune('0') || c > rune('9') {
														goto l66
													}
													position++
													goto l65
												l66:
													position, tokenIndex = position66, tokenIndex66
												}
												{
													switch buffer[position] {
													case 'd':
														if buffer[position] != rune('d') {
															goto l61
														}
														position++
													case 'h':
														if buffer[position] != rune('h') {
															goto l61
														}
														position++
													case 'm':
														if buffer[position] != rune('m') {
															goto l61
														}
														position++
													default:
														if buffer[position] != rune('s') {
															goto l61
														}
														position++
													}
												}

												add(rulePegText, position64)
											}
											add(ruleDuration, position63)
										}
										{
											add(ruleAction10, position)
										}
										add(ruleDelay, position62)
									}
									goto l60
								l61:
									position, tokenIndex = position60, tokenIndex60
									{
										position69 := position
										add(ruleHandler, position69)
									}
								}
							l60:
								goto l59
							l58:
								position, tokenIndex = position58, tokenIndex58
							}
						l59:
							if !_rules[ruleNL]() {
								goto l51
							}
							{
								add(ruleAction17, position)
							}
							add(ruleState, position52)
						}
						goto l5
					l51:
						position, tokenIndex = position5, tokenIndex5
						{
							position72 := position
							if buffer[position] != rune('!') {
								goto l71
							}
							position++
							if buffer[position] != rune('t') {
								goto l71
							}
							position++
							if buffer[position] != rune('h') {
								goto l71
							}
							position++
							if buffer[position] != rune('e') {
								goto l71
							}
							position++
							if buffer[position] != rune('m') {
								goto l71
							}
							position++
							if buffer[position] != rune('e') {
								goto l71
							}
							position++
							if !_rules[ruleSP]() {
								goto l71
							}
							if !_rules[ruleanySequence]() {
								goto l71
							}
							if !_rules[ruleSP]() {
								goto l71
							}
							if !_rules[ruleNL]() {
								goto l71
							}
							add(ruleTheme, position72)
						}
						goto l5
					l71:
						position, tokenIndex = position5, tokenIndex5
						{
							switch buffer[position] {
							case '\'':
								{
									position74 := position
									if buffer[position] != rune('\'') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									if !_rules[ruleanySequence]() {
										goto l4
									}
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleComment, position74)
								}
							case '!':
								{
									position75 := position
									if buffer[position] != rune('!') {
										goto l4
									}
									position++
									if buffer[position] != rune('$') {
										goto l4
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l4
									}
									if !_rules[ruleSP]() {
										goto l4
									}
									if buffer[position] != rune('=') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									{
										position76, tokenIndex76 := position, tokenIndex
										if buffer[position] != rune('"') {
											goto l76
										}
										position++
										goto l77
									l76:
										position, tokenIndex = position76, tokenIndex76
									}
								l77:
									if !_rules[ruleanySequence]() {
										goto l4
									}
								l78:
									{
										position79, tokenIndex79 := position, tokenIndex
										if !_rules[ruleanySequence]() {
											goto l79
										}
										goto l78
									l79:
										position, tokenIndex = position79, tokenIndex79
									}
									{
										position80, tokenIndex80 := position, tokenIndex
										if buffer[position] != rune('"') {
											goto l80
										}
										position++
										goto l81
									l80:
										position, tokenIndex = position80, tokenIndex80
									}
								l81:
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleVar, position75)
								}
							case 's':
								{
									position82 := position
									if buffer[position] != rune('s') {
										goto l4
									}
									position++
									if buffer[position] != rune('k') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('n') {
										goto l4
									}
									position++
									if buffer[position] != rune('p') {
										goto l4
									}
									position++
									if buffer[position] != rune('a') {
										goto l4
									}
									position++
									if buffer[position] != rune('r') {
										goto l4
									}
									position++
									if buffer[position] != rune('a') {
										goto l4
									}
									position++
									if buffer[position] != rune('m') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									if !_rules[ruleanySequence]() {
										goto l4
									}
									if !_rules[ruleSP]() {
										goto l4
									}
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleSkinparam, position82)
								}
							case 'h':
								{
									position83 := position
									if buffer[position] != rune('h') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('d') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if buffer[position] != rune(' ') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if buffer[position] != rune('m') {
										goto l4
									}
									position++
									if buffer[position] != rune('p') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('y') {
										goto l4
									}
									position++
									if buffer[position] != rune(' ') {
										goto l4
									}
									position++
									if buffer[position] != rune('d') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if buffer[position] != rune('s') {
										goto l4
									}
									position++
									if buffer[position] != rune('c') {
										goto l4
									}
									position++
									if buffer[position] != rune('r') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('p') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('o') {
										goto l4
									}
									position++
									if buffer[position] != rune('n') {
										goto l4
									}
									position++
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleHideEmptyDescription, position83)
								}
							default:
								{
									position84 := position
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('l') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									{
										position85 := position
										if !_rules[ruleanySequence]() {
											goto l4
										}
										add(rulePegText, position85)
									}
									if !_rules[ruleNL]() {
										goto l4
									}
									{
										add(ruleAction2, position)
									}
									add(ruleTitle, position84)
								}
							}
						}

					}
				l5:
					goto l3
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				{
					position87 := position
					if buffer[position] != rune('@') {
						goto l0
					}
					position++
					if buffer[position] != rune('e') {
						goto l0
					}
					position++
					if buffer[position] != rune('n') {
						goto l0
					}
					position++
					if buffer[position] != rune('d') {
						goto l0
					}
					position++
					if buffer[position] != rune('u') {
						goto l0
					}
					position++
					if buffer[position] != rune('m') {
						goto l0
					}
					position++
					if buffer[position] != rune('l') {
						goto l0
					}
					position++
					if !_rules[ruleNL]() {
						goto l0
					}
					add(ruleEnd, position87)
				}
				{
					position88, tokenIndex88 := position, tokenIndex
					if !matchDot() {
						goto l88
					}
					goto l0
				l88:
					position, tokenIndex = position88, tokenIndex88
				}
				add(ruleStateDiagram, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 identifier <- <((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))+> */
		func() bool {
			position89, tokenIndex89 := position, tokenIndex
			{
				position90 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l89
						}
						position++
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l89
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l89
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l89
						}
						position++
					}
				}

			l91:
				{
					position92, tokenIndex92 := position, tokenIndex
					{
						switch buffer[position] {
						case '_':
							if buffer[position] != rune('_') {
								goto l92
							}
							position++
						case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l92
							}
							position++
						case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l92
							}
							position++
						default:
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l92
							}
							position++
						}
					}

					goto l91
				l92:
					position, tokenIndex = position92, tokenIndex92
				}
				add(ruleidentifier, position90)
			}
			return true
		l89:
			position, tokenIndex = position89, tokenIndex89
			return false
		},
		/* 2 anyChar <- <(!([:->] / ((&('/') '/') | (&('\t') '\t') | (&('<') '<') | (&(' ') ' ') | (&('\n') '\n') | (&('\r') '\r'))) .)> */
		func() bool {
			position95, tokenIndex95 := position, tokenIndex
			{
				position96 := position
				{
					position97, tokenIndex97 := position, tokenIndex
					{
						position98, tokenIndex98 := position, tokenIndex
						if c := buffer[position]; c < rune(':') || c > rune('>') {
							goto l99
						}
						position++
						goto l98
					l99:
						position, tokenIndex = position98, tokenIndex98
						{
							switch buffer[position] {
							case '/':
								if buffer[position] != rune('/') {
									goto l97
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l97
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l97
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l97
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l97
								}
								position++
							default:
								if buffer[position] != rune('\r') {
									goto l97
								}
								position++
							}
						}

					}
				l98:
					goto l95
				l97:
					position, tokenIndex = position97, tokenIndex97
				}
				if !matchDot() {
					goto l95
				}
				add(ruleanyChar, position96)
			}
			return true
		l95:
			position, tokenIndex = position95, tokenIndex95
			return false
		},
		/* 3 anySequence <- <(!('\r' / '\n') .)+> */
		func() bool {
			position101, tokenIndex101 := position, tokenIndex
			{
				position102 := position
				{
					position105, tokenIndex105 := position, tokenIndex
					{
						position106, tokenIndex106 := position, tokenIndex
						if buffer[position] != rune('\r') {
							goto l107
						}
						position++
						goto l106
					l107:
						position, tokenIndex = position106, tokenIndex106
						if buffer[position] != rune('\n') {
							goto l105
						}
						position++
					}
				l106:
					goto l101
				l105:
					position, tokenIndex = position105, tokenIndex105
				}
				if !matchDot() {
					goto l101
				}
			l103:
				{
					position104, tokenIndex104 := position, tokenIndex
					{
						position108, tokenIndex108 := position, tokenIndex
						{
							position109, tokenIndex109 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l110
							}
							position++
							goto l109
						l110:
							position, tokenIndex = position109, tokenIndex109
							if buffer[position] != rune('\n') {
								goto l108
							}
							position++
						}
					l109:
						goto l104
					l108:
						position, tokenIndex = position108, tokenIndex108
					}
					if !matchDot() {
						goto l104
					}
					goto l103
				l104:
					position, tokenIndex = position104, tokenIndex104
				}
				add(ruleanySequence, position102)
			}
			return true
		l101:
			position, tokenIndex = position101, tokenIndex101
			return false
		},
		/* 4 NL <- <(('\r' '\n') / '\n')*> */
		func() bool {
			{
				position112 := position
			l113:
				{
					position114, tokenIndex114 := position, tokenIndex
					{
						position115, tokenIndex115 := position, tokenIndex
						if buffer[position] != rune('\r') {
							goto l116
						}
						position++
						if buffer[position] != rune('\n') {
							goto l116
						}
						position++
						goto l115
					l116:
						position, tokenIndex = position115, tokenIndex115
						if buffer[position] != rune('\n') {
							goto l114
						}
						position++
					}
				l115:
					goto l113
				l114:
					position, tokenIndex = position114, tokenIndex114
				}
				add(ruleNL, position112)
			}
			return true
		},
		/* 5 SP <- <((&('\\') ('\\' 'n')) | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position118 := position
			l119:
				{
					position120, tokenIndex120 := position, tokenIndex
					{
						switch buffer[position] {
						case '\\':
							if buffer[position] != rune('\\') {
								goto l120
							}
							position++
							if buffer[position] != rune('n') {
								goto l120
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l120
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l120
							}
							position++
						}
					}

					goto l119
				l120:
					position, tokenIndex = position120, tokenIndex120
				}
				add(ruleSP, position118)
			}
			return true
		},
		/* 6 Word <- <(<anyChar+> Action0)> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				{
					position124 := position
					if !_rules[ruleanyChar]() {
						goto l122
					}
				l125:
					{
						position126, tokenIndex126 := position, tokenIndex
						if !_rules[ruleanyChar]() {
							goto l126
						}
						goto l125
					l126:
						position, tokenIndex = position126, tokenIndex126
					}
					add(rulePegText, position124)
				}
				{
					add(ruleAction0, position)
				}
				add(ruleWord, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 7 Tag <- <('<' '<' <identifier> ('>' '>') Action1)> */
		nil,
		/* 8 Duration <- <<([0-9]+ ((&('d') 'd') | (&('h') 'h') | (&('m') 'm') | (&('s') 's')))>> */
		nil,
		/* 9 Title <- <('t' 'i' 't' 'l' 'e' SP <anySequence> NL Action2)> */
		nil,
		/* 10 Name <- <('!' '$' 'n' 'a' 'm' 'e' SP '=' SP '"' <anySequence> '"' NL Action3)> */
		nil,
		/* 11 Version <- <('!' '$' 'v' 'e' 'r' 's' 'i' 'o' 'n' SP '=' SP '"'? <([0-9]+ . [0-9]+)> '"'? NL Action4)> */
		nil,
		/* 12 HideEmptyDescription <- <('h' 'i' 'd' 'e' ' ' 'e' 'm' 'p' 't' 'y' ' ' 'd' 'e' 's' 'c' 'r' 'i' 'p' 't' 'i' 'o' 'n' NL)> */
		nil,
		/* 13 Theme <- <('!' 't' 'h' 'e' 'm' 'e' SP anySequence SP NL)> */
		nil,
		/* 14 Skinparam <- <('s' 'k' 'i' 'n' 'p' 'a' 'r' 'a' 'm' SP anySequence SP NL)> */
		nil,
		/* 15 StateSkin <- <('s' 't' 'a' 't' 'e' SP StateName SP '#' anyChar+ NL)> */
		nil,
		/* 16 Var <- <('!' '$' identifier SP '=' SP '"'? anySequence+ '"'? NL)> */
		nil,
		/* 17 Comment <- <('\'' SP anySequence NL)> */
		nil,
		/* 18 Start <- <('@' 's' 't' 'a' 'r' 't' 'u' 'm' 'l' NL)> */
		nil,
		/* 19 End <- <('@' 'e' 'n' 'd' 'u' 'm' 'l' NL)> */
		nil,
		/* 20 Arr <- <('-' '>')> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				if buffer[position] != rune('-') {
					goto l141
				}
				position++
				if buffer[position] != rune('>') {
					goto l141
				}
				position++
				add(ruleArr, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 21 DoubleArr <- <('-' Arr)> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				if buffer[position] != rune('-') {
					goto l143
				}
				position++
				if !_rules[ruleArr]() {
					goto l143
				}
				add(ruleDoubleArr, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 22 TripleArr <- <('-' DoubleArr)> */
		nil,
		/* 23 DirectionArr <- <('-' Direction Arr)> */
		nil,
		/* 24 BackArr <- <('<' '-')> */
		func() bool {
			position147, tokenIndex147 := position, tokenIndex
			{
				position148 := position
				if buffer[position] != rune('<') {
					goto l147
				}
				position++
				if buffer[position] != rune('-') {
					goto l147
				}
				position++
				add(ruleBackArr, position148)
			}
			return true
		l147:
			position, tokenIndex = position147, tokenIndex147
			return false
		},
		/* 25 DoubleBackArr <- <(BackArr '-')> */
		func() bool {
			position149, tokenIndex149 := position, tokenIndex
			{
				position150 := position
				if !_rules[ruleBackArr]() {
					goto l149
				}
				if buffer[position] != rune('-') {
					goto l149
				}
				position++
				add(ruleDoubleBackArr, position150)
			}
			return true
		l149:
			position, tokenIndex = position149, tokenIndex149
			return false
		},
		/* 26 TripleBackArr <- <(DoubleBackArr '-')> */
		nil,
		/* 27 DirectionBackArr <- <(BackArr Direction '-')> */
		nil,
		/* 28 Arrow <- <(Arr / DoubleArr / TripleArr / DirectionArr)> */
		nil,
		/* 29 BackArrow <- <(BackArr / DoubleBackArr / TripleBackArr / DirectionBackArr)> */
		nil,
		/* 30 Direction <- <(('u' 'p') / ('d' 'o' 'w' 'n') / ('r' 'i' 'g' 'h' 't') / ('l' 'e' 'f' 't') / ((&('d') 'd') | (&('u') 'u') | (&('r') 'r') | (&('l') 'l')))> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				{
					position157, tokenIndex157 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l158
					}
					position++
					if buffer[position] != rune('p') {
						goto l158
					}
					position++
					goto l157
				l158:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('d') {
						goto l159
					}
					position++
					if buffer[position] != rune('o') {
						goto l159
					}
					position++
					if buffer[position] != rune('w') {
						goto l159
					}
					position++
					if buffer[position] != rune('n') {
						goto l159
					}
					position++
					goto l157
				l159:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('r') {
						goto l160
					}
					position++
					if buffer[position] != rune('i') {
						goto l160
					}
					position++
					if buffer[position] != rune('g') {
						goto l160
					}
					position++
					if buffer[position] != rune('h') {
						goto l160
					}
					position++
					if buffer[position] != rune('t') {
						goto l160
					}
					position++
					goto l157
				l160:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('l') {
						goto l161
					}
					position++
					if buffer[position] != rune('e') {
						goto l161
					}
					position++
					if buffer[position] != rune('f') {
						goto l161
					}
					position++
					if buffer[position] != rune('t') {
						goto l161
					}
					position++
					goto l157
				l161:
					position, tokenIndex = position157, tokenIndex157
					{
						switch buffer[position] {
						case 'd':
							if buffer[position] != rune('d') {
								goto l155
							}
							position++
						case 'u':
							if buffer[position] != rune('u') {
								goto l155
							}
							position++
						case 'r':
							if buffer[position] != rune('r') {
								goto l155
							}
							position++
						default:
							if buffer[position] != rune('l') {
								goto l155
							}
							position++
						}
					}

				}
			l157:
				add(ruleDirection, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 31 TerminalState <- <('[' '*' ']')> */
		nil,
		/* 32 StateFrom <- <((TermState Action5) / (Word Action6))> */
		func() bool {
			position164, tokenIndex164 := position, tokenIndex
			{
				position165 := position
				{
					position166, tokenIndex166 := position, tokenIndex
					if !_rules[ruleTermState]() {
						goto l167
					}
					{
						add(ruleAction5, position)
					}
					goto l166
				l167:
					position, tokenIndex = position166, tokenIndex166
					if !_rules[ruleWord]() {
						goto l164
					}
					{
						add(ruleAction6, position)
					}
				}
			l166:
				add(ruleStateFrom, position165)
			}
			return true
		l164:
			position, tokenIndex = position164, tokenIndex164
			return false
		},
		/* 33 StateTo <- <((TermState Action7) / (Word Action8))> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				{
					position172, tokenIndex172 := position, tokenIndex
					if !_rules[ruleTermState]() {
						goto l173
					}
					{
						add(ruleAction7, position)
					}
					goto l172
				l173:
					position, tokenIndex = position172, tokenIndex172
					if !_rules[ruleWord]() {
						goto l170
					}
					{
						add(ruleAction8, position)
					}
				}
			l172:
				add(ruleStateTo, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 34 StateName <- <(Word Action9)> */
		func() bool {
			position176, tokenIndex176 := position, tokenIndex
			{
				position177 := position
				if !_rules[ruleWord]() {
					goto l176
				}
				{
					add(ruleAction9, position)
				}
				add(ruleStateName, position177)
			}
			return true
		l176:
			position, tokenIndex = position176, tokenIndex176
			return false
		},
		/* 35 Delay <- <('d' 'e' 'l' 'a' 'y' '=' Duration Action10)> */
		nil,
		/* 36 contextVarPath <- <('c' 't' 'x' ('.' identifier)+)> */
		nil,
		/* 37 ParamName <- <(<identifier> Action11)> */
		nil,
		/* 38 ParamValue <- <(SP '=' SP '"' <(!'"' .)+> '"' Action12)> */
		nil,
		/* 39 ParamValueFromContext <- <(SP '=' SP <contextVarPath> Action13)> */
		nil,
		/* 40 Param <- <(ParamName (ParamValueFromContext / ParamValue)? Action14)> */
		nil,
		/* 41 HandlerName <- <(<((identifier '.')? identifier)> Action15)> */
		nil,
		/* 42 EventName <- <('[' <identifier> ']' Action16)> */
		nil,
		/* 43 State <- <('s' 't' 'a' 't' 'e' SP StateName SP (tag SP?)* SP (':' SP (Delay / Handler))? NL Action17)> */
		nil,
		/* 44 Transition <- <(((StateFrom SP Arrow SP StateTo) / (StateTo SP BackArrow SP StateFrom)) SP (':' sp EventName)? NL Action18)> */
		nil,
		nil,
		/* 47 Action0 <- <{ p.word = text }> */
		nil,
		/* 48 Action1 <- <{ p.AddTag(text) }> */
		nil,
		/* 49 Action2 <- <{ p.Title = text }> */
		nil,
		/* 50 Action3 <- <{ p.Name = text }> */
		nil,
		/* 51 Action4 <- <{ p.setVersion(text) }> */
		nil,
		nil,
		/* 53 Action5 <- <{ p.stateFrom = "START" }> */
		nil,
		/* 54 Action6 <- <{ p.stateFrom = p.word }> */
		nil,
		/* 55 Action7 <- <{ p.stateTo = "END" }> */
		nil,
		/* 56 Action8 <- <{ p.stateTo = p.word }> */
		nil,
		/* 57 Action9 <- <{ p.stateName = p.word }> */
		nil,
		/* 58 Action10 <- <{ p.delay = text }> */
		nil,
		/* 59 Action11 <- <{ p.paramName = text }> */
		nil,
		/* 60 Action12 <- <{ p.paramValue = text }> */
		nil,
		/* 61 Action13 <- <{ p.contextVarPath = text }> */
		nil,
		/* 62 Action14 <- <{ p.appendParam() }> */
		nil,
		/* 63 Action15 <- <{ p.handlerName = text }> */
		nil,
		/* 64 Action16 <- <{ p.eventName = text}> */
		nil,
		nil,
		nil,
		/* 67 Action17 <- <{
		    dto := &AddStateDto {
		        StateName: p.stateName,
		        Handler: p.handlerName,
		        Params: p.params,
		    }
		    p.AddState(dto);
		    p.clearState()
		}> */
		nil,
		nil,
		/* 69 Action18 <- <{
		    dto := &AddTransitionDto {
		        StateFrom: p.stateFrom,
		        StateTo: p.stateTo,
		        Event: p.eventName,
		    }
		    p.AddTransition(dto);
		    p.clearState()
		}> */
		nil,
	}
	p.rules = _rules
	return nil
}
