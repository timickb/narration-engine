package parser

// Code generated by peg -switch -inline -output state_diagram.gen.go state_diagram.peg DO NOT EDIT.

import (
	"fmt"
	"github.com/timickb/narration-engine/internal/domain"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleStateDiagram
	ruleidentifier
	ruleanyChar
	ruleanySequence
	ruleNL
	ruleSP
	ruleWord
	ruleTag
	ruleDuration
	ruleTitle
	ruleName
	ruleVersion
	ruleHideEmptyDescription
	ruleTheme
	ruleSkinparam
	ruleStateSkin
	ruleVar
	ruleComment
	ruleStart
	ruleEnd
	ruleArr
	ruleDoubleArr
	ruleTripleArr
	ruleDirectionArr
	ruleBackArr
	ruleDoubleBackArr
	ruleTripleBackArr
	ruleDirectionBackArr
	ruleArrow
	ruleBackArrow
	ruleDirection
	ruleTerminalState
	ruleStateFrom
	ruleStateTo
	ruleStateName
	ruleDelay
	ruleRetry
	rulecontextVarPath
	ruleParamName
	ruleParamValue
	ruleParamValueFromContext
	ruleParam
	ruleHandlerName
	ruleHandlerParams
	ruleHandler
	ruleEventName
	ruleState
	ruleTransition
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
)

var rul3s = [...]string{
	"Unknown",
	"StateDiagram",
	"identifier",
	"anyChar",
	"anySequence",
	"NL",
	"SP",
	"Word",
	"Tag",
	"Duration",
	"Title",
	"Name",
	"Version",
	"HideEmptyDescription",
	"Theme",
	"Skinparam",
	"StateSkin",
	"Var",
	"Comment",
	"Start",
	"End",
	"Arr",
	"DoubleArr",
	"TripleArr",
	"DirectionArr",
	"BackArr",
	"DoubleBackArr",
	"TripleBackArr",
	"DirectionBackArr",
	"Arrow",
	"BackArrow",
	"Direction",
	"TerminalState",
	"StateFrom",
	"StateTo",
	"StateName",
	"Delay",
	"Retry",
	"contextVarPath",
	"ParamName",
	"ParamValue",
	"ParamValueFromContext",
	"Param",
	"HandlerName",
	"HandlerParams",
	"Handler",
	"EventName",
	"State",
	"Transition",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type StateDiagram struct {
	States
	Transitions

	Name        string
	Title       string
	Version     string
	RetryLabels map[string]string

	word           string
	tags           []string
	params         map[string]domain.StateParamValue
	stateFrom      string
	stateTo        string
	stateName      string
	eventName      string
	handlerName    string
	paramName      string
	paramValue     string
	contextVarPath string

	delay string
	retry string

	Buffer string
	buffer []rune
	rules  [70]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *StateDiagram) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *StateDiagram) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *StateDiagram
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *StateDiagram) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *StateDiagram) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *StateDiagram) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *StateDiagram) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.word = text
		case ruleAction1:
			p.AddTag(text)
		case ruleAction2:
			p.Title = text
		case ruleAction3:
			p.setName(text)
		case ruleAction4:
			p.setVersion(text)
		case ruleAction5:
			p.stateFrom = "START"
		case ruleAction6:
			p.stateFrom = p.word
		case ruleAction7:
			p.stateTo = "END"
		case ruleAction8:
			p.stateTo = p.word
		case ruleAction9:
			p.stateName = p.word
		case ruleAction10:
			p.delay = text
		case ruleAction11:
			p.retry = text
		case ruleAction12:
			p.paramName = text
		case ruleAction13:
			p.paramValue = text
		case ruleAction14:
			p.contextVarPath = text
		case ruleAction15:
			p.appendParam()
		case ruleAction16:
			p.handlerName = text
		case ruleAction17:
			p.eventName = text
		case ruleAction18:

			dto := &AddStateDto{
				StateName: p.stateName,
				Handler:   p.handlerName,
				Params:    p.params,
				Delay:     p.delay,
				Retry:     p.retry,
			}
			p.AddOrUpdateState(dto)
			p.clearState()

		case ruleAction19:

			dto := &AddTransitionDto{
				StateFrom: p.stateFrom,
				StateTo:   p.stateTo,
				Event:     p.eventName,
			}
			p.AddTransition(dto)
			p.clearState()

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*StateDiagram) error {
	return func(p *StateDiagram) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*StateDiagram) error {
	return func(p *StateDiagram) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *StateDiagram) Init(options ...func(*StateDiagram) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 StateDiagram <- <(Start (Version / Name / Transition / StateSkin / State / Theme / ((&('\'') Comment) | (&('!') Var) | (&('s') Skinparam) | (&('h') HideEmptyDescription) | (&('t') Title)))* End !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2 := position
					if buffer[position] != rune('@') {
						goto l0
					}
					position++
					if buffer[position] != rune('s') {
						goto l0
					}
					position++
					if buffer[position] != rune('t') {
						goto l0
					}
					position++
					if buffer[position] != rune('a') {
						goto l0
					}
					position++
					if buffer[position] != rune('r') {
						goto l0
					}
					position++
					if buffer[position] != rune('t') {
						goto l0
					}
					position++
					if buffer[position] != rune('u') {
						goto l0
					}
					position++
					if buffer[position] != rune('m') {
						goto l0
					}
					position++
					if buffer[position] != rune('l') {
						goto l0
					}
					position++
					if !_rules[ruleNL]() {
						goto l0
					}
					add(ruleStart, position2)
				}
			l3:
				{
					position4, tokenIndex4 := position, tokenIndex
					{
						position5, tokenIndex5 := position, tokenIndex
						{
							position7 := position
							if buffer[position] != rune('!') {
								goto l6
							}
							position++
							if buffer[position] != rune('$') {
								goto l6
							}
							position++
							if buffer[position] != rune('v') {
								goto l6
							}
							position++
							if buffer[position] != rune('e') {
								goto l6
							}
							position++
							if buffer[position] != rune('r') {
								goto l6
							}
							position++
							if buffer[position] != rune('s') {
								goto l6
							}
							position++
							if buffer[position] != rune('i') {
								goto l6
							}
							position++
							if buffer[position] != rune('o') {
								goto l6
							}
							position++
							if buffer[position] != rune('n') {
								goto l6
							}
							position++
							if !_rules[ruleSP]() {
								goto l6
							}
							if buffer[position] != rune('=') {
								goto l6
							}
							position++
							if !_rules[ruleSP]() {
								goto l6
							}
							{
								position8, tokenIndex8 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l8
								}
								position++
								goto l9
							l8:
								position, tokenIndex = position8, tokenIndex8
							}
						l9:
							{
								position10 := position
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l6
								}
								position++
							l11:
								{
									position12, tokenIndex12 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l12
									}
									position++
									goto l11
								l12:
									position, tokenIndex = position12, tokenIndex12
								}
								if !matchDot() {
									goto l6
								}
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l6
								}
								position++
							l13:
								{
									position14, tokenIndex14 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l14
									}
									position++
									goto l13
								l14:
									position, tokenIndex = position14, tokenIndex14
								}
								add(rulePegText, position10)
							}
							{
								position15, tokenIndex15 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l15
								}
								position++
								goto l16
							l15:
								position, tokenIndex = position15, tokenIndex15
							}
						l16:
							if !_rules[ruleNL]() {
								goto l6
							}
							{
								add(ruleAction4, position)
							}
							add(ruleVersion, position7)
						}
						goto l5
					l6:
						position, tokenIndex = position5, tokenIndex5
						{
							position19 := position
							if buffer[position] != rune('!') {
								goto l18
							}
							position++
							if buffer[position] != rune('$') {
								goto l18
							}
							position++
							if buffer[position] != rune('n') {
								goto l18
							}
							position++
							if buffer[position] != rune('a') {
								goto l18
							}
							position++
							if buffer[position] != rune('m') {
								goto l18
							}
							position++
							if buffer[position] != rune('e') {
								goto l18
							}
							position++
							if !_rules[ruleSP]() {
								goto l18
							}
							if buffer[position] != rune('=') {
								goto l18
							}
							position++
							if !_rules[ruleSP]() {
								goto l18
							}
							if buffer[position] != rune('"') {
								goto l18
							}
							position++
							{
								position20 := position
								if !_rules[ruleidentifier]() {
									goto l18
								}
								add(rulePegText, position20)
							}
							if buffer[position] != rune('"') {
								goto l18
							}
							position++
							if !_rules[ruleNL]() {
								goto l18
							}
							{
								add(ruleAction3, position)
							}
							add(ruleName, position19)
						}
						goto l5
					l18:
						position, tokenIndex = position5, tokenIndex5
						{
							position23 := position
							{
								position24, tokenIndex24 := position, tokenIndex
								if !_rules[ruleStateFrom]() {
									goto l25
								}
								if !_rules[ruleSP]() {
									goto l25
								}
								{
									position26 := position
									{
										position27, tokenIndex27 := position, tokenIndex
										if !_rules[ruleArr]() {
											goto l28
										}
										goto l27
									l28:
										position, tokenIndex = position27, tokenIndex27
										if !_rules[ruleDoubleArr]() {
											goto l29
										}
										goto l27
									l29:
										position, tokenIndex = position27, tokenIndex27
										{
											position31 := position
											if buffer[position] != rune('-') {
												goto l30
											}
											position++
											if !_rules[ruleDoubleArr]() {
												goto l30
											}
											add(ruleTripleArr, position31)
										}
										goto l27
									l30:
										position, tokenIndex = position27, tokenIndex27
										{
											position32 := position
											if buffer[position] != rune('-') {
												goto l25
											}
											position++
											if !_rules[ruleDirection]() {
												goto l25
											}
											if !_rules[ruleArr]() {
												goto l25
											}
											add(ruleDirectionArr, position32)
										}
									}
								l27:
									add(ruleArrow, position26)
								}
								if !_rules[ruleSP]() {
									goto l25
								}
								if !_rules[ruleStateTo]() {
									goto l25
								}
								goto l24
							l25:
								position, tokenIndex = position24, tokenIndex24
								if !_rules[ruleStateTo]() {
									goto l22
								}
								if !_rules[ruleSP]() {
									goto l22
								}
								{
									position33 := position
									{
										position34, tokenIndex34 := position, tokenIndex
										if !_rules[ruleBackArr]() {
											goto l35
										}
										goto l34
									l35:
										position, tokenIndex = position34, tokenIndex34
										if !_rules[ruleDoubleBackArr]() {
											goto l36
										}
										goto l34
									l36:
										position, tokenIndex = position34, tokenIndex34
										{
											position38 := position
											if !_rules[ruleDoubleBackArr]() {
												goto l37
											}
											if buffer[position] != rune('-') {
												goto l37
											}
											position++
											add(ruleTripleBackArr, position38)
										}
										goto l34
									l37:
										position, tokenIndex = position34, tokenIndex34
										{
											position39 := position
											if !_rules[ruleBackArr]() {
												goto l22
											}
											if !_rules[ruleDirection]() {
												goto l22
											}
											if buffer[position] != rune('-') {
												goto l22
											}
											position++
											add(ruleDirectionBackArr, position39)
										}
									}
								l34:
									add(ruleBackArrow, position33)
								}
								if !_rules[ruleSP]() {
									goto l22
								}
								if !_rules[ruleStateFrom]() {
									goto l22
								}
							}
						l24:
							if !_rules[ruleSP]() {
								goto l22
							}
							{
								position40, tokenIndex40 := position, tokenIndex
								if buffer[position] != rune(':') {
									goto l40
								}
								position++
								if !_rules[ruleSP]() {
									goto l40
								}
								{
									position42 := position
									if buffer[position] != rune('[') {
										goto l40
									}
									position++
									{
										position43 := position
										if !_rules[ruleidentifier]() {
											goto l40
										}
										add(rulePegText, position43)
									}
									if buffer[position] != rune(']') {
										goto l40
									}
									position++
									{
										add(ruleAction17, position)
									}
									add(ruleEventName, position42)
								}
								goto l41
							l40:
								position, tokenIndex = position40, tokenIndex40
							}
						l41:
							if !_rules[ruleNL]() {
								goto l22
							}
							{
								add(ruleAction19, position)
							}
							add(ruleTransition, position23)
						}
						goto l5
					l22:
						position, tokenIndex = position5, tokenIndex5
						{
							position47 := position
							if buffer[position] != rune('s') {
								goto l46
							}
							position++
							if buffer[position] != rune('t') {
								goto l46
							}
							position++
							if buffer[position] != rune('a') {
								goto l46
							}
							position++
							if buffer[position] != rune('t') {
								goto l46
							}
							position++
							if buffer[position] != rune('e') {
								goto l46
							}
							position++
							if !_rules[ruleSP]() {
								goto l46
							}
							if !_rules[ruleStateName]() {
								goto l46
							}
							if !_rules[ruleSP]() {
								goto l46
							}
							if buffer[position] != rune('#') {
								goto l46
							}
							position++
							if !_rules[ruleanyChar]() {
								goto l46
							}
						l48:
							{
								position49, tokenIndex49 := position, tokenIndex
								if !_rules[ruleanyChar]() {
									goto l49
								}
								goto l48
							l49:
								position, tokenIndex = position49, tokenIndex49
							}
							if !_rules[ruleNL]() {
								goto l46
							}
							add(ruleStateSkin, position47)
						}
						goto l5
					l46:
						position, tokenIndex = position5, tokenIndex5
						{
							position51 := position
							if buffer[position] != rune('s') {
								goto l50
							}
							position++
							if buffer[position] != rune('t') {
								goto l50
							}
							position++
							if buffer[position] != rune('a') {
								goto l50
							}
							position++
							if buffer[position] != rune('t') {
								goto l50
							}
							position++
							if buffer[position] != rune('e') {
								goto l50
							}
							position++
							if !_rules[ruleSP]() {
								goto l50
							}
							if !_rules[ruleStateName]() {
								goto l50
							}
							if !_rules[ruleSP]() {
								goto l50
							}
						l52:
							{
								position53, tokenIndex53 := position, tokenIndex
								{
									position54 := position
									if buffer[position] != rune('<') {
										goto l53
									}
									position++
									if buffer[position] != rune('<') {
										goto l53
									}
									position++
									{
										position55 := position
										if !_rules[ruleidentifier]() {
											goto l53
										}
										add(rulePegText, position55)
									}
									if buffer[position] != rune('>') {
										goto l53
									}
									position++
									if buffer[position] != rune('>') {
										goto l53
									}
									position++
									{
										add(ruleAction1, position)
									}
									add(ruleTag, position54)
								}
								{
									position57, tokenIndex57 := position, tokenIndex
									if !_rules[ruleSP]() {
										goto l57
									}
									goto l58
								l57:
									position, tokenIndex = position57, tokenIndex57
								}
							l58:
								goto l52
							l53:
								position, tokenIndex = position53, tokenIndex53
							}
							if !_rules[ruleSP]() {
								goto l50
							}
							{
								position59, tokenIndex59 := position, tokenIndex
								if buffer[position] != rune(':') {
									goto l59
								}
								position++
								if !_rules[ruleSP]() {
									goto l59
								}
								{
									position61, tokenIndex61 := position, tokenIndex
									if !_rules[ruleDelay]() {
										goto l62
									}
									goto l61
								l62:
									position, tokenIndex = position61, tokenIndex61
									if !_rules[ruleRetry]() {
										goto l63
									}
									goto l61
								l63:
									position, tokenIndex = position61, tokenIndex61
									if !_rules[ruleDelay]() {
										goto l64
									}
									if !_rules[ruleSP]() {
										goto l64
									}
									if !_rules[ruleRetry]() {
										goto l64
									}
									goto l61
								l64:
									position, tokenIndex = position61, tokenIndex61
									if !_rules[ruleRetry]() {
										goto l65
									}
									if !_rules[ruleSP]() {
										goto l65
									}
									if !_rules[ruleDelay]() {
										goto l65
									}
									goto l61
								l65:
									position, tokenIndex = position61, tokenIndex61
									{
										position66 := position
										{
											position67 := position
											{
												position68 := position
												{
													position69, tokenIndex69 := position, tokenIndex
													if !_rules[ruleidentifier]() {
														goto l69
													}
													if buffer[position] != rune('.') {
														goto l69
													}
													position++
													goto l70
												l69:
													position, tokenIndex = position69, tokenIndex69
												}
											l70:
												if !_rules[ruleidentifier]() {
													goto l59
												}
												add(rulePegText, position68)
											}
											{
												add(ruleAction16, position)
											}
											add(ruleHandlerName, position67)
										}
										{
											position72, tokenIndex72 := position, tokenIndex
											{
												position74 := position
												if buffer[position] != rune('(') {
													goto l72
												}
												position++
												{
													position75, tokenIndex75 := position, tokenIndex
													if !_rules[ruleParam]() {
														goto l75
													}
												l77:
													{
														position78, tokenIndex78 := position, tokenIndex
														if buffer[position] != rune(',') {
															goto l78
														}
														position++
														if !_rules[ruleSP]() {
															goto l78
														}
														if !_rules[ruleParam]() {
															goto l78
														}
														goto l77
													l78:
														position, tokenIndex = position78, tokenIndex78
													}
													goto l76
												l75:
													position, tokenIndex = position75, tokenIndex75
												}
											l76:
												if buffer[position] != rune(')') {
													goto l72
												}
												position++
												add(ruleHandlerParams, position74)
											}
											goto l73
										l72:
											position, tokenIndex = position72, tokenIndex72
										}
									l73:
										add(ruleHandler, position66)
									}
								}
							l61:
								goto l60
							l59:
								position, tokenIndex = position59, tokenIndex59
							}
						l60:
							if !_rules[ruleNL]() {
								goto l50
							}
							{
								add(ruleAction18, position)
							}
							add(ruleState, position51)
						}
						goto l5
					l50:
						position, tokenIndex = position5, tokenIndex5
						{
							position81 := position
							if buffer[position] != rune('!') {
								goto l80
							}
							position++
							if buffer[position] != rune('t') {
								goto l80
							}
							position++
							if buffer[position] != rune('h') {
								goto l80
							}
							position++
							if buffer[position] != rune('e') {
								goto l80
							}
							position++
							if buffer[position] != rune('m') {
								goto l80
							}
							position++
							if buffer[position] != rune('e') {
								goto l80
							}
							position++
							if !_rules[ruleSP]() {
								goto l80
							}
							if !_rules[ruleanySequence]() {
								goto l80
							}
							if !_rules[ruleSP]() {
								goto l80
							}
							if !_rules[ruleNL]() {
								goto l80
							}
							add(ruleTheme, position81)
						}
						goto l5
					l80:
						position, tokenIndex = position5, tokenIndex5
						{
							switch buffer[position] {
							case '\'':
								{
									position83 := position
									if buffer[position] != rune('\'') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									if !_rules[ruleanySequence]() {
										goto l4
									}
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleComment, position83)
								}
							case '!':
								{
									position84 := position
									if buffer[position] != rune('!') {
										goto l4
									}
									position++
									if buffer[position] != rune('$') {
										goto l4
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l4
									}
									if !_rules[ruleSP]() {
										goto l4
									}
									if buffer[position] != rune('=') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									{
										position85, tokenIndex85 := position, tokenIndex
										if buffer[position] != rune('"') {
											goto l85
										}
										position++
										goto l86
									l85:
										position, tokenIndex = position85, tokenIndex85
									}
								l86:
									if !_rules[ruleanySequence]() {
										goto l4
									}
								l87:
									{
										position88, tokenIndex88 := position, tokenIndex
										if !_rules[ruleanySequence]() {
											goto l88
										}
										goto l87
									l88:
										position, tokenIndex = position88, tokenIndex88
									}
									{
										position89, tokenIndex89 := position, tokenIndex
										if buffer[position] != rune('"') {
											goto l89
										}
										position++
										goto l90
									l89:
										position, tokenIndex = position89, tokenIndex89
									}
								l90:
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleVar, position84)
								}
							case 's':
								{
									position91 := position
									if buffer[position] != rune('s') {
										goto l4
									}
									position++
									if buffer[position] != rune('k') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('n') {
										goto l4
									}
									position++
									if buffer[position] != rune('p') {
										goto l4
									}
									position++
									if buffer[position] != rune('a') {
										goto l4
									}
									position++
									if buffer[position] != rune('r') {
										goto l4
									}
									position++
									if buffer[position] != rune('a') {
										goto l4
									}
									position++
									if buffer[position] != rune('m') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									if !_rules[ruleanySequence]() {
										goto l4
									}
									if !_rules[ruleSP]() {
										goto l4
									}
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleSkinparam, position91)
								}
							case 'h':
								{
									position92 := position
									if buffer[position] != rune('h') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('d') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if buffer[position] != rune(' ') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if buffer[position] != rune('m') {
										goto l4
									}
									position++
									if buffer[position] != rune('p') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('y') {
										goto l4
									}
									position++
									if buffer[position] != rune(' ') {
										goto l4
									}
									position++
									if buffer[position] != rune('d') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if buffer[position] != rune('s') {
										goto l4
									}
									position++
									if buffer[position] != rune('c') {
										goto l4
									}
									position++
									if buffer[position] != rune('r') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('p') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('o') {
										goto l4
									}
									position++
									if buffer[position] != rune('n') {
										goto l4
									}
									position++
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleHideEmptyDescription, position92)
								}
							default:
								{
									position93 := position
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('l') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									{
										position94 := position
										if !_rules[ruleanySequence]() {
											goto l4
										}
										add(rulePegText, position94)
									}
									if !_rules[ruleNL]() {
										goto l4
									}
									{
										add(ruleAction2, position)
									}
									add(ruleTitle, position93)
								}
							}
						}

					}
				l5:
					goto l3
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				{
					position96 := position
					if buffer[position] != rune('@') {
						goto l0
					}
					position++
					if buffer[position] != rune('e') {
						goto l0
					}
					position++
					if buffer[position] != rune('n') {
						goto l0
					}
					position++
					if buffer[position] != rune('d') {
						goto l0
					}
					position++
					if buffer[position] != rune('u') {
						goto l0
					}
					position++
					if buffer[position] != rune('m') {
						goto l0
					}
					position++
					if buffer[position] != rune('l') {
						goto l0
					}
					position++
					if !_rules[ruleNL]() {
						goto l0
					}
					add(ruleEnd, position96)
				}
				{
					position97, tokenIndex97 := position, tokenIndex
					if !matchDot() {
						goto l97
					}
					goto l0
				l97:
					position, tokenIndex = position97, tokenIndex97
				}
				add(ruleStateDiagram, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 identifier <- <((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))+> */
		func() bool {
			position98, tokenIndex98 := position, tokenIndex
			{
				position99 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l98
						}
						position++
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l98
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l98
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l98
						}
						position++
					}
				}

			l100:
				{
					position101, tokenIndex101 := position, tokenIndex
					{
						switch buffer[position] {
						case '_':
							if buffer[position] != rune('_') {
								goto l101
							}
							position++
						case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l101
							}
							position++
						case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l101
							}
							position++
						default:
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l101
							}
							position++
						}
					}

					goto l100
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
				add(ruleidentifier, position99)
			}
			return true
		l98:
			position, tokenIndex = position98, tokenIndex98
			return false
		},
		/* 2 anyChar <- <(!([:->] / ((&('/') '/') | (&('\t') '\t') | (&('<') '<') | (&(' ') ' ') | (&('\n') '\n') | (&('\r') '\r'))) .)> */
		func() bool {
			position104, tokenIndex104 := position, tokenIndex
			{
				position105 := position
				{
					position106, tokenIndex106 := position, tokenIndex
					{
						position107, tokenIndex107 := position, tokenIndex
						if c := buffer[position]; c < rune(':') || c > rune('>') {
							goto l108
						}
						position++
						goto l107
					l108:
						position, tokenIndex = position107, tokenIndex107
						{
							switch buffer[position] {
							case '/':
								if buffer[position] != rune('/') {
									goto l106
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l106
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l106
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l106
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l106
								}
								position++
							default:
								if buffer[position] != rune('\r') {
									goto l106
								}
								position++
							}
						}

					}
				l107:
					goto l104
				l106:
					position, tokenIndex = position106, tokenIndex106
				}
				if !matchDot() {
					goto l104
				}
				add(ruleanyChar, position105)
			}
			return true
		l104:
			position, tokenIndex = position104, tokenIndex104
			return false
		},
		/* 3 anySequence <- <(!('\r' / '\n') .)+> */
		func() bool {
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				{
					position114, tokenIndex114 := position, tokenIndex
					{
						position115, tokenIndex115 := position, tokenIndex
						if buffer[position] != rune('\r') {
							goto l116
						}
						position++
						goto l115
					l116:
						position, tokenIndex = position115, tokenIndex115
						if buffer[position] != rune('\n') {
							goto l114
						}
						position++
					}
				l115:
					goto l110
				l114:
					position, tokenIndex = position114, tokenIndex114
				}
				if !matchDot() {
					goto l110
				}
			l112:
				{
					position113, tokenIndex113 := position, tokenIndex
					{
						position117, tokenIndex117 := position, tokenIndex
						{
							position118, tokenIndex118 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l119
							}
							position++
							goto l118
						l119:
							position, tokenIndex = position118, tokenIndex118
							if buffer[position] != rune('\n') {
								goto l117
							}
							position++
						}
					l118:
						goto l113
					l117:
						position, tokenIndex = position117, tokenIndex117
					}
					if !matchDot() {
						goto l113
					}
					goto l112
				l113:
					position, tokenIndex = position113, tokenIndex113
				}
				add(ruleanySequence, position111)
			}
			return true
		l110:
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 4 NL <- <(('\r' '\n') / '\n')*> */
		func() bool {
			{
				position121 := position
			l122:
				{
					position123, tokenIndex123 := position, tokenIndex
					{
						position124, tokenIndex124 := position, tokenIndex
						if buffer[position] != rune('\r') {
							goto l125
						}
						position++
						if buffer[position] != rune('\n') {
							goto l125
						}
						position++
						goto l124
					l125:
						position, tokenIndex = position124, tokenIndex124
						if buffer[position] != rune('\n') {
							goto l123
						}
						position++
					}
				l124:
					goto l122
				l123:
					position, tokenIndex = position123, tokenIndex123
				}
				add(ruleNL, position121)
			}
			return true
		},
		/* 5 SP <- <((&('\\') ('\\' 'n')) | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position127 := position
			l128:
				{
					position129, tokenIndex129 := position, tokenIndex
					{
						switch buffer[position] {
						case '\\':
							if buffer[position] != rune('\\') {
								goto l129
							}
							position++
							if buffer[position] != rune('n') {
								goto l129
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l129
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l129
							}
							position++
						}
					}

					goto l128
				l129:
					position, tokenIndex = position129, tokenIndex129
				}
				add(ruleSP, position127)
			}
			return true
		},
		/* 6 Word <- <(<anyChar+> Action0)> */
		func() bool {
			position131, tokenIndex131 := position, tokenIndex
			{
				position132 := position
				{
					position133 := position
					if !_rules[ruleanyChar]() {
						goto l131
					}
				l134:
					{
						position135, tokenIndex135 := position, tokenIndex
						if !_rules[ruleanyChar]() {
							goto l135
						}
						goto l134
					l135:
						position, tokenIndex = position135, tokenIndex135
					}
					add(rulePegText, position133)
				}
				{
					add(ruleAction0, position)
				}
				add(ruleWord, position132)
			}
			return true
		l131:
			position, tokenIndex = position131, tokenIndex131
			return false
		},
		/* 7 Tag <- <('<' '<' <identifier> ('>' '>') Action1)> */
		nil,
		/* 8 Duration <- <([1-9] [0-9]* ((&('d') 'd') | (&('h') 'h') | (&('m') 'm') | (&('s') 's')))> */
		func() bool {
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
				if c := buffer[position]; c < rune('1') || c > rune('9') {
					goto l138
				}
				position++
			l140:
				{
					position141, tokenIndex141 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l141
					}
					position++
					goto l140
				l141:
					position, tokenIndex = position141, tokenIndex141
				}
				{
					switch buffer[position] {
					case 'd':
						if buffer[position] != rune('d') {
							goto l138
						}
						position++
					case 'h':
						if buffer[position] != rune('h') {
							goto l138
						}
						position++
					case 'm':
						if buffer[position] != rune('m') {
							goto l138
						}
						position++
					default:
						if buffer[position] != rune('s') {
							goto l138
						}
						position++
					}
				}

				add(ruleDuration, position139)
			}
			return true
		l138:
			position, tokenIndex = position138, tokenIndex138
			return false
		},
		/* 9 Title <- <('t' 'i' 't' 'l' 'e' SP <anySequence> NL Action2)> */
		nil,
		/* 10 Name <- <('!' '$' 'n' 'a' 'm' 'e' SP '=' SP '"' <identifier> '"' NL Action3)> */
		nil,
		/* 11 Version <- <('!' '$' 'v' 'e' 'r' 's' 'i' 'o' 'n' SP '=' SP '"'? <([0-9]+ . [0-9]+)> '"'? NL Action4)> */
		nil,
		/* 12 HideEmptyDescription <- <('h' 'i' 'd' 'e' ' ' 'e' 'm' 'p' 't' 'y' ' ' 'd' 'e' 's' 'c' 'r' 'i' 'p' 't' 'i' 'o' 'n' NL)> */
		nil,
		/* 13 Theme <- <('!' 't' 'h' 'e' 'm' 'e' SP anySequence SP NL)> */
		nil,
		/* 14 Skinparam <- <('s' 'k' 'i' 'n' 'p' 'a' 'r' 'a' 'm' SP anySequence SP NL)> */
		nil,
		/* 15 StateSkin <- <('s' 't' 'a' 't' 'e' SP StateName SP '#' anyChar+ NL)> */
		nil,
		/* 16 Var <- <('!' '$' identifier SP '=' SP '"'? anySequence+ '"'? NL)> */
		nil,
		/* 17 Comment <- <('\'' SP anySequence NL)> */
		nil,
		/* 18 Start <- <('@' 's' 't' 'a' 'r' 't' 'u' 'm' 'l' NL)> */
		nil,
		/* 19 End <- <('@' 'e' 'n' 'd' 'u' 'm' 'l' NL)> */
		nil,
		/* 20 Arr <- <('-' '>')> */
		func() bool {
			position154, tokenIndex154 := position, tokenIndex
			{
				position155 := position
				if buffer[position] != rune('-') {
					goto l154
				}
				position++
				if buffer[position] != rune('>') {
					goto l154
				}
				position++
				add(ruleArr, position155)
			}
			return true
		l154:
			position, tokenIndex = position154, tokenIndex154
			return false
		},
		/* 21 DoubleArr <- <('-' Arr)> */
		func() bool {
			position156, tokenIndex156 := position, tokenIndex
			{
				position157 := position
				if buffer[position] != rune('-') {
					goto l156
				}
				position++
				if !_rules[ruleArr]() {
					goto l156
				}
				add(ruleDoubleArr, position157)
			}
			return true
		l156:
			position, tokenIndex = position156, tokenIndex156
			return false
		},
		/* 22 TripleArr <- <('-' DoubleArr)> */
		nil,
		/* 23 DirectionArr <- <('-' Direction Arr)> */
		nil,
		/* 24 BackArr <- <('<' '-')> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				if buffer[position] != rune('<') {
					goto l160
				}
				position++
				if buffer[position] != rune('-') {
					goto l160
				}
				position++
				add(ruleBackArr, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 25 DoubleBackArr <- <(BackArr '-')> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				if !_rules[ruleBackArr]() {
					goto l162
				}
				if buffer[position] != rune('-') {
					goto l162
				}
				position++
				add(ruleDoubleBackArr, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 26 TripleBackArr <- <(DoubleBackArr '-')> */
		nil,
		/* 27 DirectionBackArr <- <(BackArr Direction '-')> */
		nil,
		/* 28 Arrow <- <(Arr / DoubleArr / TripleArr / DirectionArr)> */
		nil,
		/* 29 BackArrow <- <(BackArr / DoubleBackArr / TripleBackArr / DirectionBackArr)> */
		nil,
		/* 30 Direction <- <(('u' 'p') / ('d' 'o' 'w' 'n') / ('r' 'i' 'g' 'h' 't') / ('l' 'e' 'f' 't') / ((&('d') 'd') | (&('u') 'u') | (&('r') 'r') | (&('l') 'l')))> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				{
					position170, tokenIndex170 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l171
					}
					position++
					if buffer[position] != rune('p') {
						goto l171
					}
					position++
					goto l170
				l171:
					position, tokenIndex = position170, tokenIndex170
					if buffer[position] != rune('d') {
						goto l172
					}
					position++
					if buffer[position] != rune('o') {
						goto l172
					}
					position++
					if buffer[position] != rune('w') {
						goto l172
					}
					position++
					if buffer[position] != rune('n') {
						goto l172
					}
					position++
					goto l170
				l172:
					position, tokenIndex = position170, tokenIndex170
					if buffer[position] != rune('r') {
						goto l173
					}
					position++
					if buffer[position] != rune('i') {
						goto l173
					}
					position++
					if buffer[position] != rune('g') {
						goto l173
					}
					position++
					if buffer[position] != rune('h') {
						goto l173
					}
					position++
					if buffer[position] != rune('t') {
						goto l173
					}
					position++
					goto l170
				l173:
					position, tokenIndex = position170, tokenIndex170
					if buffer[position] != rune('l') {
						goto l174
					}
					position++
					if buffer[position] != rune('e') {
						goto l174
					}
					position++
					if buffer[position] != rune('f') {
						goto l174
					}
					position++
					if buffer[position] != rune('t') {
						goto l174
					}
					position++
					goto l170
				l174:
					position, tokenIndex = position170, tokenIndex170
					{
						switch buffer[position] {
						case 'd':
							if buffer[position] != rune('d') {
								goto l168
							}
							position++
						case 'u':
							if buffer[position] != rune('u') {
								goto l168
							}
							position++
						case 'r':
							if buffer[position] != rune('r') {
								goto l168
							}
							position++
						default:
							if buffer[position] != rune('l') {
								goto l168
							}
							position++
						}
					}

				}
			l170:
				add(ruleDirection, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 31 TerminalState <- <('[' '*' ']')> */
		func() bool {
			position176, tokenIndex176 := position, tokenIndex
			{
				position177 := position
				if buffer[position] != rune('[') {
					goto l176
				}
				position++
				if buffer[position] != rune('*') {
					goto l176
				}
				position++
				if buffer[position] != rune(']') {
					goto l176
				}
				position++
				add(ruleTerminalState, position177)
			}
			return true
		l176:
			position, tokenIndex = position176, tokenIndex176
			return false
		},
		/* 32 StateFrom <- <((TerminalState Action5) / (Word Action6))> */
		func() bool {
			position178, tokenIndex178 := position, tokenIndex
			{
				position179 := position
				{
					position180, tokenIndex180 := position, tokenIndex
					if !_rules[ruleTerminalState]() {
						goto l181
					}
					{
						add(ruleAction5, position)
					}
					goto l180
				l181:
					position, tokenIndex = position180, tokenIndex180
					if !_rules[ruleWord]() {
						goto l178
					}
					{
						add(ruleAction6, position)
					}
				}
			l180:
				add(ruleStateFrom, position179)
			}
			return true
		l178:
			position, tokenIndex = position178, tokenIndex178
			return false
		},
		/* 33 StateTo <- <((TerminalState Action7) / (Word Action8))> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				{
					position186, tokenIndex186 := position, tokenIndex
					if !_rules[ruleTerminalState]() {
						goto l187
					}
					{
						add(ruleAction7, position)
					}
					goto l186
				l187:
					position, tokenIndex = position186, tokenIndex186
					if !_rules[ruleWord]() {
						goto l184
					}
					{
						add(ruleAction8, position)
					}
				}
			l186:
				add(ruleStateTo, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 34 StateName <- <(Word Action9)> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if !_rules[ruleWord]() {
					goto l190
				}
				{
					add(ruleAction9, position)
				}
				add(ruleStateName, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 35 Delay <- <('d' 'e' 'l' 'a' 'y' '=' <Duration> Action10)> */
		func() bool {
			position193, tokenIndex193 := position, tokenIndex
			{
				position194 := position
				if buffer[position] != rune('d') {
					goto l193
				}
				position++
				if buffer[position] != rune('e') {
					goto l193
				}
				position++
				if buffer[position] != rune('l') {
					goto l193
				}
				position++
				if buffer[position] != rune('a') {
					goto l193
				}
				position++
				if buffer[position] != rune('y') {
					goto l193
				}
				position++
				if buffer[position] != rune('=') {
					goto l193
				}
				position++
				{
					position195 := position
					if !_rules[ruleDuration]() {
						goto l193
					}
					add(rulePegText, position195)
				}
				{
					add(ruleAction10, position)
				}
				add(ruleDelay, position194)
			}
			return true
		l193:
			position, tokenIndex = position193, tokenIndex193
			return false
		},
		/* 36 Retry <- <('r' 'e' 't' 'r' 'y' '=' <(Duration (',' Duration)+)> Action11)> */
		func() bool {
			position197, tokenIndex197 := position, tokenIndex
			{
				position198 := position
				if buffer[position] != rune('r') {
					goto l197
				}
				position++
				if buffer[position] != rune('e') {
					goto l197
				}
				position++
				if buffer[position] != rune('t') {
					goto l197
				}
				position++
				if buffer[position] != rune('r') {
					goto l197
				}
				position++
				if buffer[position] != rune('y') {
					goto l197
				}
				position++
				if buffer[position] != rune('=') {
					goto l197
				}
				position++
				{
					position199 := position
					if !_rules[ruleDuration]() {
						goto l197
					}
					if buffer[position] != rune(',') {
						goto l197
					}
					position++
					if !_rules[ruleDuration]() {
						goto l197
					}
				l200:
					{
						position201, tokenIndex201 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l201
						}
						position++
						if !_rules[ruleDuration]() {
							goto l201
						}
						goto l200
					l201:
						position, tokenIndex = position201, tokenIndex201
					}
					add(rulePegText, position199)
				}
				{
					add(ruleAction11, position)
				}
				add(ruleRetry, position198)
			}
			return true
		l197:
			position, tokenIndex = position197, tokenIndex197
			return false
		},
		/* 37 contextVarPath <- <('c' 't' 'x' ('.' identifier)+)> */
		nil,
		/* 38 ParamName <- <(<identifier> Action12)> */
		nil,
		/* 39 ParamValue <- <(SP '=' SP '"' <(!'"' .)+> '"' Action13)> */
		nil,
		/* 40 ParamValueFromContext <- <(SP '=' SP <contextVarPath> Action14)> */
		nil,
		/* 41 Param <- <(ParamName (ParamValueFromContext / ParamValue)? Action15)> */
		func() bool {
			position207, tokenIndex207 := position, tokenIndex
			{
				position208 := position
				{
					position209 := position
					{
						position210 := position
						if !_rules[ruleidentifier]() {
							goto l207
						}
						add(rulePegText, position210)
					}
					{
						add(ruleAction12, position)
					}
					add(ruleParamName, position209)
				}
				{
					position212, tokenIndex212 := position, tokenIndex
					{
						position214, tokenIndex214 := position, tokenIndex
						{
							position216 := position
							if !_rules[ruleSP]() {
								goto l215
							}
							if buffer[position] != rune('=') {
								goto l215
							}
							position++
							if !_rules[ruleSP]() {
								goto l215
							}
							{
								position217 := position
								{
									position218 := position
									if buffer[position] != rune('c') {
										goto l215
									}
									position++
									if buffer[position] != rune('t') {
										goto l215
									}
									position++
									if buffer[position] != rune('x') {
										goto l215
									}
									position++
									if buffer[position] != rune('.') {
										goto l215
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l215
									}
								l219:
									{
										position220, tokenIndex220 := position, tokenIndex
										if buffer[position] != rune('.') {
											goto l220
										}
										position++
										if !_rules[ruleidentifier]() {
											goto l220
										}
										goto l219
									l220:
										position, tokenIndex = position220, tokenIndex220
									}
									add(rulecontextVarPath, position218)
								}
								add(rulePegText, position217)
							}
							{
								add(ruleAction14, position)
							}
							add(ruleParamValueFromContext, position216)
						}
						goto l214
					l215:
						position, tokenIndex = position214, tokenIndex214
						{
							position222 := position
							if !_rules[ruleSP]() {
								goto l212
							}
							if buffer[position] != rune('=') {
								goto l212
							}
							position++
							if !_rules[ruleSP]() {
								goto l212
							}
							if buffer[position] != rune('"') {
								goto l212
							}
							position++
							{
								position223 := position
								{
									position226, tokenIndex226 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l226
									}
									position++
									goto l212
								l226:
									position, tokenIndex = position226, tokenIndex226
								}
								if !matchDot() {
									goto l212
								}
							l224:
								{
									position225, tokenIndex225 := position, tokenIndex
									{
										position227, tokenIndex227 := position, tokenIndex
										if buffer[position] != rune('"') {
											goto l227
										}
										position++
										goto l225
									l227:
										position, tokenIndex = position227, tokenIndex227
									}
									if !matchDot() {
										goto l225
									}
									goto l224
								l225:
									position, tokenIndex = position225, tokenIndex225
								}
								add(rulePegText, position223)
							}
							if buffer[position] != rune('"') {
								goto l212
							}
							position++
							{
								add(ruleAction13, position)
							}
							add(ruleParamValue, position222)
						}
					}
				l214:
					goto l213
				l212:
					position, tokenIndex = position212, tokenIndex212
				}
			l213:
				{
					add(ruleAction15, position)
				}
				add(ruleParam, position208)
			}
			return true
		l207:
			position, tokenIndex = position207, tokenIndex207
			return false
		},
		/* 42 HandlerName <- <(<((identifier '.')? identifier)> Action16)> */
		nil,
		/* 43 HandlerParams <- <('(' (Param (',' SP Param)*)? ')')> */
		nil,
		/* 44 Handler <- <(HandlerName HandlerParams?)> */
		nil,
		/* 45 EventName <- <('[' <identifier> ']' Action17)> */
		nil,
		/* 46 State <- <('s' 't' 'a' 't' 'e' SP StateName SP (Tag SP?)* SP (':' SP (Delay / Retry / (Delay SP Retry) / (Retry SP Delay) / Handler))? NL Action18)> */
		nil,
		/* 47 Transition <- <(((StateFrom SP Arrow SP StateTo) / (StateTo SP BackArrow SP StateFrom)) SP (':' SP EventName)? NL Action19)> */
		nil,
		nil,
		/* 50 Action0 <- <{ p.word = text }> */
		nil,
		/* 51 Action1 <- <{ p.AddTag(text) }> */
		nil,
		/* 52 Action2 <- <{ p.Title = text }> */
		nil,
		/* 53 Action3 <- <{ p.setName(text) }> */
		nil,
		/* 54 Action4 <- <{ p.setVersion(text) }> */
		nil,
		/* 55 Action5 <- <{ p.stateFrom = "START" }> */
		nil,
		/* 56 Action6 <- <{ p.stateFrom = p.word }> */
		nil,
		/* 57 Action7 <- <{ p.stateTo = "END" }> */
		nil,
		/* 58 Action8 <- <{ p.stateTo = p.word }> */
		nil,
		/* 59 Action9 <- <{ p.stateName = p.word }> */
		nil,
		/* 60 Action10 <- <{ p.delay = text }> */
		nil,
		/* 61 Action11 <- <{ p.retry = text }> */
		nil,
		/* 62 Action12 <- <{ p.paramName = text }> */
		nil,
		/* 63 Action13 <- <{ p.paramValue = text }> */
		nil,
		/* 64 Action14 <- <{ p.contextVarPath = text }> */
		nil,
		/* 65 Action15 <- <{ p.appendParam() }> */
		nil,
		/* 66 Action16 <- <{ p.handlerName = text }> */
		nil,
		/* 67 Action17 <- <{ p.eventName = text}> */
		nil,
		/* 68 Action18 <- <{
		    dto := &AddStateDto {
		        StateName: p.stateName,
		        Handler: p.handlerName,
		        Params: p.params,
		        Delay: p.delay,
		        Retry: p.retry,
		    }
		    p.AddOrUpdateState(dto);
		    p.clearState()
		}> */
		nil,
		/* 69 Action19 <- <{
		    dto := &AddTransitionDto {
		        StateFrom: p.stateFrom,
		        StateTo: p.stateTo,
		        Event: p.eventName,
		    }
		    p.AddTransition(dto);
		    p.clearState()
		}> */
		nil,
	}
	p.rules = _rules
	return nil
}
