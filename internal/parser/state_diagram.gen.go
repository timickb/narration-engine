package parser

// Code generated by peg -switch -inline -output state_diagram.gen.go state_diagram.peg DO NOT EDIT.

import (
	"fmt"
	"github.com/timickb/go-stateflow/internal/domain"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleStateDiagram
	ruleidentifier
	ruleanyChar
	ruleanySequence
	ruleNL
	ruleSP
	ruleWord
	ruleTag
	ruleDuration
	ruleTitle
	ruleName
	ruleVersion
	ruleHideEmptyDescription
	ruleTheme
	ruleSkinparam
	ruleStateSkin
	ruleVar
	ruleComment
	ruleStart
	ruleEnd
	ruleArr
	ruleDoubleArr
	ruleTripleArr
	ruleDirectionArr
	ruleBackArr
	ruleDoubleBackArr
	ruleTripleBackArr
	ruleDirectionBackArr
	ruleArrow
	ruleBackArrow
	ruleDirection
	ruleTerminalState
	ruleStateFrom
	ruleStateTo
	ruleStateName
	ruleDelay
	rulecontextVarPath
	ruleParamName
	ruleParamValue
	ruleParamValueFromContext
	ruleParam
	ruleHandlerName
	ruleHandlerParams
	ruleHandler
	ruleEventName
	ruleState
	ruleTransition
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
)

var rul3s = [...]string{
	"Unknown",
	"StateDiagram",
	"identifier",
	"anyChar",
	"anySequence",
	"NL",
	"SP",
	"Word",
	"Tag",
	"Duration",
	"Title",
	"Name",
	"Version",
	"HideEmptyDescription",
	"Theme",
	"Skinparam",
	"StateSkin",
	"Var",
	"Comment",
	"Start",
	"End",
	"Arr",
	"DoubleArr",
	"TripleArr",
	"DirectionArr",
	"BackArr",
	"DoubleBackArr",
	"TripleBackArr",
	"DirectionBackArr",
	"Arrow",
	"BackArrow",
	"Direction",
	"TerminalState",
	"StateFrom",
	"StateTo",
	"StateName",
	"Delay",
	"contextVarPath",
	"ParamName",
	"ParamValue",
	"ParamValueFromContext",
	"Param",
	"HandlerName",
	"HandlerParams",
	"Handler",
	"EventName",
	"State",
	"Transition",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type StateDiagram struct {
	States
	Transitions

	Name    string
	Title   string
	Version string

	word           string
	tags           []string
	params         map[string]domain.StateParamValue
	stateFrom      string
	stateTo        string
	stateName      string
	eventName      string
	handlerName    string
	paramName      string
	paramValue     string
	contextVarPath string
	delay          string

	Buffer string
	buffer []rune
	rules  [68]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *StateDiagram) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *StateDiagram) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *StateDiagram
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *StateDiagram) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *StateDiagram) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *StateDiagram) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *StateDiagram) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.word = text
		case ruleAction1:
			p.AddTag(text)
		case ruleAction2:
			p.Title = text
		case ruleAction3:
			p.setName(text)
		case ruleAction4:
			p.setVersion(text)
		case ruleAction5:
			p.stateFrom = "START"
		case ruleAction6:
			p.stateFrom = p.word
		case ruleAction7:
			p.stateTo = "END"
		case ruleAction8:
			p.stateTo = p.word
		case ruleAction9:
			p.stateName = p.word
		case ruleAction10:
			p.delay = text
		case ruleAction11:
			p.paramName = text
		case ruleAction12:
			p.paramValue = text
		case ruleAction13:
			p.contextVarPath = text
		case ruleAction14:
			p.appendParam()
		case ruleAction15:
			p.handlerName = text
		case ruleAction16:
			p.eventName = text
		case ruleAction17:

			dto := &AddStateDto{
				StateName: p.stateName,
				Handler:   p.handlerName,
				Params:    p.params,
			}
			p.AddState(dto)
			p.clearState()

		case ruleAction18:

			dto := &AddTransitionDto{
				StateFrom: p.stateFrom,
				StateTo:   p.stateTo,
				Event:     p.eventName,
			}
			p.AddTransition(dto)
			p.clearState()

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*StateDiagram) error {
	return func(p *StateDiagram) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*StateDiagram) error {
	return func(p *StateDiagram) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *StateDiagram) Init(options ...func(*StateDiagram) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 StateDiagram <- <(Start (Version / Name / Transition / StateSkin / State / Theme / ((&('\'') Comment) | (&('!') Var) | (&('s') Skinparam) | (&('h') HideEmptyDescription) | (&('t') Title)))* End !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2 := position
					if buffer[position] != rune('@') {
						goto l0
					}
					position++
					if buffer[position] != rune('s') {
						goto l0
					}
					position++
					if buffer[position] != rune('t') {
						goto l0
					}
					position++
					if buffer[position] != rune('a') {
						goto l0
					}
					position++
					if buffer[position] != rune('r') {
						goto l0
					}
					position++
					if buffer[position] != rune('t') {
						goto l0
					}
					position++
					if buffer[position] != rune('u') {
						goto l0
					}
					position++
					if buffer[position] != rune('m') {
						goto l0
					}
					position++
					if buffer[position] != rune('l') {
						goto l0
					}
					position++
					if !_rules[ruleNL]() {
						goto l0
					}
					add(ruleStart, position2)
				}
			l3:
				{
					position4, tokenIndex4 := position, tokenIndex
					{
						position5, tokenIndex5 := position, tokenIndex
						{
							position7 := position
							if buffer[position] != rune('!') {
								goto l6
							}
							position++
							if buffer[position] != rune('$') {
								goto l6
							}
							position++
							if buffer[position] != rune('v') {
								goto l6
							}
							position++
							if buffer[position] != rune('e') {
								goto l6
							}
							position++
							if buffer[position] != rune('r') {
								goto l6
							}
							position++
							if buffer[position] != rune('s') {
								goto l6
							}
							position++
							if buffer[position] != rune('i') {
								goto l6
							}
							position++
							if buffer[position] != rune('o') {
								goto l6
							}
							position++
							if buffer[position] != rune('n') {
								goto l6
							}
							position++
							if !_rules[ruleSP]() {
								goto l6
							}
							if buffer[position] != rune('=') {
								goto l6
							}
							position++
							if !_rules[ruleSP]() {
								goto l6
							}
							{
								position8, tokenIndex8 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l8
								}
								position++
								goto l9
							l8:
								position, tokenIndex = position8, tokenIndex8
							}
						l9:
							{
								position10 := position
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l6
								}
								position++
							l11:
								{
									position12, tokenIndex12 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l12
									}
									position++
									goto l11
								l12:
									position, tokenIndex = position12, tokenIndex12
								}
								if !matchDot() {
									goto l6
								}
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l6
								}
								position++
							l13:
								{
									position14, tokenIndex14 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l14
									}
									position++
									goto l13
								l14:
									position, tokenIndex = position14, tokenIndex14
								}
								add(rulePegText, position10)
							}
							{
								position15, tokenIndex15 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l15
								}
								position++
								goto l16
							l15:
								position, tokenIndex = position15, tokenIndex15
							}
						l16:
							if !_rules[ruleNL]() {
								goto l6
							}
							{
								add(ruleAction4, position)
							}
							add(ruleVersion, position7)
						}
						goto l5
					l6:
						position, tokenIndex = position5, tokenIndex5
						{
							position19 := position
							if buffer[position] != rune('!') {
								goto l18
							}
							position++
							if buffer[position] != rune('$') {
								goto l18
							}
							position++
							if buffer[position] != rune('n') {
								goto l18
							}
							position++
							if buffer[position] != rune('a') {
								goto l18
							}
							position++
							if buffer[position] != rune('m') {
								goto l18
							}
							position++
							if buffer[position] != rune('e') {
								goto l18
							}
							position++
							if !_rules[ruleSP]() {
								goto l18
							}
							if buffer[position] != rune('=') {
								goto l18
							}
							position++
							if !_rules[ruleSP]() {
								goto l18
							}
							if buffer[position] != rune('"') {
								goto l18
							}
							position++
							{
								position20 := position
								if !_rules[ruleidentifier]() {
									goto l18
								}
								add(rulePegText, position20)
							}
							if buffer[position] != rune('"') {
								goto l18
							}
							position++
							if !_rules[ruleNL]() {
								goto l18
							}
							{
								add(ruleAction3, position)
							}
							add(ruleName, position19)
						}
						goto l5
					l18:
						position, tokenIndex = position5, tokenIndex5
						{
							position23 := position
							{
								position24, tokenIndex24 := position, tokenIndex
								if !_rules[ruleStateFrom]() {
									goto l25
								}
								if !_rules[ruleSP]() {
									goto l25
								}
								{
									position26 := position
									{
										position27, tokenIndex27 := position, tokenIndex
										if !_rules[ruleArr]() {
											goto l28
										}
										goto l27
									l28:
										position, tokenIndex = position27, tokenIndex27
										if !_rules[ruleDoubleArr]() {
											goto l29
										}
										goto l27
									l29:
										position, tokenIndex = position27, tokenIndex27
										{
											position31 := position
											if buffer[position] != rune('-') {
												goto l30
											}
											position++
											if !_rules[ruleDoubleArr]() {
												goto l30
											}
											add(ruleTripleArr, position31)
										}
										goto l27
									l30:
										position, tokenIndex = position27, tokenIndex27
										{
											position32 := position
											if buffer[position] != rune('-') {
												goto l25
											}
											position++
											if !_rules[ruleDirection]() {
												goto l25
											}
											if !_rules[ruleArr]() {
												goto l25
											}
											add(ruleDirectionArr, position32)
										}
									}
								l27:
									add(ruleArrow, position26)
								}
								if !_rules[ruleSP]() {
									goto l25
								}
								if !_rules[ruleStateTo]() {
									goto l25
								}
								goto l24
							l25:
								position, tokenIndex = position24, tokenIndex24
								if !_rules[ruleStateTo]() {
									goto l22
								}
								if !_rules[ruleSP]() {
									goto l22
								}
								{
									position33 := position
									{
										position34, tokenIndex34 := position, tokenIndex
										if !_rules[ruleBackArr]() {
											goto l35
										}
										goto l34
									l35:
										position, tokenIndex = position34, tokenIndex34
										if !_rules[ruleDoubleBackArr]() {
											goto l36
										}
										goto l34
									l36:
										position, tokenIndex = position34, tokenIndex34
										{
											position38 := position
											if !_rules[ruleDoubleBackArr]() {
												goto l37
											}
											if buffer[position] != rune('-') {
												goto l37
											}
											position++
											add(ruleTripleBackArr, position38)
										}
										goto l34
									l37:
										position, tokenIndex = position34, tokenIndex34
										{
											position39 := position
											if !_rules[ruleBackArr]() {
												goto l22
											}
											if !_rules[ruleDirection]() {
												goto l22
											}
											if buffer[position] != rune('-') {
												goto l22
											}
											position++
											add(ruleDirectionBackArr, position39)
										}
									}
								l34:
									add(ruleBackArrow, position33)
								}
								if !_rules[ruleSP]() {
									goto l22
								}
								if !_rules[ruleStateFrom]() {
									goto l22
								}
							}
						l24:
							if !_rules[ruleSP]() {
								goto l22
							}
							{
								position40, tokenIndex40 := position, tokenIndex
								if buffer[position] != rune(':') {
									goto l40
								}
								position++
								if !_rules[ruleSP]() {
									goto l40
								}
								{
									position42 := position
									if buffer[position] != rune('[') {
										goto l40
									}
									position++
									{
										position43 := position
										if !_rules[ruleidentifier]() {
											goto l40
										}
										add(rulePegText, position43)
									}
									if buffer[position] != rune(']') {
										goto l40
									}
									position++
									{
										add(ruleAction16, position)
									}
									add(ruleEventName, position42)
								}
								goto l41
							l40:
								position, tokenIndex = position40, tokenIndex40
							}
						l41:
							if !_rules[ruleNL]() {
								goto l22
							}
							{
								add(ruleAction18, position)
							}
							add(ruleTransition, position23)
						}
						goto l5
					l22:
						position, tokenIndex = position5, tokenIndex5
						{
							position47 := position
							if buffer[position] != rune('s') {
								goto l46
							}
							position++
							if buffer[position] != rune('t') {
								goto l46
							}
							position++
							if buffer[position] != rune('a') {
								goto l46
							}
							position++
							if buffer[position] != rune('t') {
								goto l46
							}
							position++
							if buffer[position] != rune('e') {
								goto l46
							}
							position++
							if !_rules[ruleSP]() {
								goto l46
							}
							if !_rules[ruleStateName]() {
								goto l46
							}
							if !_rules[ruleSP]() {
								goto l46
							}
							if buffer[position] != rune('#') {
								goto l46
							}
							position++
							if !_rules[ruleanyChar]() {
								goto l46
							}
						l48:
							{
								position49, tokenIndex49 := position, tokenIndex
								if !_rules[ruleanyChar]() {
									goto l49
								}
								goto l48
							l49:
								position, tokenIndex = position49, tokenIndex49
							}
							if !_rules[ruleNL]() {
								goto l46
							}
							add(ruleStateSkin, position47)
						}
						goto l5
					l46:
						position, tokenIndex = position5, tokenIndex5
						{
							position51 := position
							if buffer[position] != rune('s') {
								goto l50
							}
							position++
							if buffer[position] != rune('t') {
								goto l50
							}
							position++
							if buffer[position] != rune('a') {
								goto l50
							}
							position++
							if buffer[position] != rune('t') {
								goto l50
							}
							position++
							if buffer[position] != rune('e') {
								goto l50
							}
							position++
							if !_rules[ruleSP]() {
								goto l50
							}
							if !_rules[ruleStateName]() {
								goto l50
							}
							if !_rules[ruleSP]() {
								goto l50
							}
						l52:
							{
								position53, tokenIndex53 := position, tokenIndex
								{
									position54 := position
									if buffer[position] != rune('<') {
										goto l53
									}
									position++
									if buffer[position] != rune('<') {
										goto l53
									}
									position++
									{
										position55 := position
										if !_rules[ruleidentifier]() {
											goto l53
										}
										add(rulePegText, position55)
									}
									if buffer[position] != rune('>') {
										goto l53
									}
									position++
									if buffer[position] != rune('>') {
										goto l53
									}
									position++
									{
										add(ruleAction1, position)
									}
									add(ruleTag, position54)
								}
								{
									position57, tokenIndex57 := position, tokenIndex
									if !_rules[ruleSP]() {
										goto l57
									}
									goto l58
								l57:
									position, tokenIndex = position57, tokenIndex57
								}
							l58:
								goto l52
							l53:
								position, tokenIndex = position53, tokenIndex53
							}
							if !_rules[ruleSP]() {
								goto l50
							}
							{
								position59, tokenIndex59 := position, tokenIndex
								if buffer[position] != rune(':') {
									goto l59
								}
								position++
								if !_rules[ruleSP]() {
									goto l59
								}
								{
									position61, tokenIndex61 := position, tokenIndex
									{
										position63 := position
										if buffer[position] != rune('d') {
											goto l62
										}
										position++
										if buffer[position] != rune('e') {
											goto l62
										}
										position++
										if buffer[position] != rune('l') {
											goto l62
										}
										position++
										if buffer[position] != rune('a') {
											goto l62
										}
										position++
										if buffer[position] != rune('y') {
											goto l62
										}
										position++
										if buffer[position] != rune('=') {
											goto l62
										}
										position++
										{
											position64 := position
											{
												position65 := position
												if c := buffer[position]; c < rune('0') || c > rune('9') {
													goto l62
												}
												position++
											l66:
												{
													position67, tokenIndex67 := position, tokenIndex
													if c := buffer[position]; c < rune('0') || c > rune('9') {
														goto l67
													}
													position++
													goto l66
												l67:
													position, tokenIndex = position67, tokenIndex67
												}
												{
													switch buffer[position] {
													case 'd':
														if buffer[position] != rune('d') {
															goto l62
														}
														position++
													case 'h':
														if buffer[position] != rune('h') {
															goto l62
														}
														position++
													case 'm':
														if buffer[position] != rune('m') {
															goto l62
														}
														position++
													default:
														if buffer[position] != rune('s') {
															goto l62
														}
														position++
													}
												}

												add(rulePegText, position65)
											}
											add(ruleDuration, position64)
										}
										{
											add(ruleAction10, position)
										}
										add(ruleDelay, position63)
									}
									goto l61
								l62:
									position, tokenIndex = position61, tokenIndex61
									{
										position70 := position
										{
											position71 := position
											{
												position72 := position
												{
													position73, tokenIndex73 := position, tokenIndex
													if !_rules[ruleidentifier]() {
														goto l73
													}
													if buffer[position] != rune('.') {
														goto l73
													}
													position++
													goto l74
												l73:
													position, tokenIndex = position73, tokenIndex73
												}
											l74:
												if !_rules[ruleidentifier]() {
													goto l59
												}
												add(rulePegText, position72)
											}
											{
												add(ruleAction15, position)
											}
											add(ruleHandlerName, position71)
										}
										{
											position76, tokenIndex76 := position, tokenIndex
											{
												position78 := position
												if buffer[position] != rune('(') {
													goto l76
												}
												position++
											l79:
												{
													position80, tokenIndex80 := position, tokenIndex
													{
														position81 := position
														{
															position82 := position
															{
																position83 := position
																if !_rules[ruleidentifier]() {
																	goto l80
																}
																add(rulePegText, position83)
															}
															{
																add(ruleAction11, position)
															}
															add(ruleParamName, position82)
														}
														{
															position85, tokenIndex85 := position, tokenIndex
															{
																position87, tokenIndex87 := position, tokenIndex
																{
																	position89 := position
																	if !_rules[ruleSP]() {
																		goto l88
																	}
																	if buffer[position] != rune('=') {
																		goto l88
																	}
																	position++
																	if !_rules[ruleSP]() {
																		goto l88
																	}
																	{
																		position90 := position
																		{
																			position91 := position
																			if buffer[position] != rune('c') {
																				goto l88
																			}
																			position++
																			if buffer[position] != rune('t') {
																				goto l88
																			}
																			position++
																			if buffer[position] != rune('x') {
																				goto l88
																			}
																			position++
																			if buffer[position] != rune('.') {
																				goto l88
																			}
																			position++
																			if !_rules[ruleidentifier]() {
																				goto l88
																			}
																		l92:
																			{
																				position93, tokenIndex93 := position, tokenIndex
																				if buffer[position] != rune('.') {
																					goto l93
																				}
																				position++
																				if !_rules[ruleidentifier]() {
																					goto l93
																				}
																				goto l92
																			l93:
																				position, tokenIndex = position93, tokenIndex93
																			}
																			add(rulecontextVarPath, position91)
																		}
																		add(rulePegText, position90)
																	}
																	{
																		add(ruleAction13, position)
																	}
																	add(ruleParamValueFromContext, position89)
																}
																goto l87
															l88:
																position, tokenIndex = position87, tokenIndex87
																{
																	position95 := position
																	if !_rules[ruleSP]() {
																		goto l85
																	}
																	if buffer[position] != rune('=') {
																		goto l85
																	}
																	position++
																	if !_rules[ruleSP]() {
																		goto l85
																	}
																	if buffer[position] != rune('"') {
																		goto l85
																	}
																	position++
																	{
																		position96 := position
																		{
																			position99, tokenIndex99 := position, tokenIndex
																			if buffer[position] != rune('"') {
																				goto l99
																			}
																			position++
																			goto l85
																		l99:
																			position, tokenIndex = position99, tokenIndex99
																		}
																		if !matchDot() {
																			goto l85
																		}
																	l97:
																		{
																			position98, tokenIndex98 := position, tokenIndex
																			{
																				position100, tokenIndex100 := position, tokenIndex
																				if buffer[position] != rune('"') {
																					goto l100
																				}
																				position++
																				goto l98
																			l100:
																				position, tokenIndex = position100, tokenIndex100
																			}
																			if !matchDot() {
																				goto l98
																			}
																			goto l97
																		l98:
																			position, tokenIndex = position98, tokenIndex98
																		}
																		add(rulePegText, position96)
																	}
																	if buffer[position] != rune('"') {
																		goto l85
																	}
																	position++
																	{
																		add(ruleAction12, position)
																	}
																	add(ruleParamValue, position95)
																}
															}
														l87:
															goto l86
														l85:
															position, tokenIndex = position85, tokenIndex85
														}
													l86:
														{
															add(ruleAction14, position)
														}
														add(ruleParam, position81)
													}
													goto l79
												l80:
													position, tokenIndex = position80, tokenIndex80
												}
												if buffer[position] != rune(')') {
													goto l76
												}
												position++
												add(ruleHandlerParams, position78)
											}
											goto l77
										l76:
											position, tokenIndex = position76, tokenIndex76
										}
									l77:
										add(ruleHandler, position70)
									}
								}
							l61:
								goto l60
							l59:
								position, tokenIndex = position59, tokenIndex59
							}
						l60:
							if !_rules[ruleNL]() {
								goto l50
							}
							{
								add(ruleAction17, position)
							}
							add(ruleState, position51)
						}
						goto l5
					l50:
						position, tokenIndex = position5, tokenIndex5
						{
							position105 := position
							if buffer[position] != rune('!') {
								goto l104
							}
							position++
							if buffer[position] != rune('t') {
								goto l104
							}
							position++
							if buffer[position] != rune('h') {
								goto l104
							}
							position++
							if buffer[position] != rune('e') {
								goto l104
							}
							position++
							if buffer[position] != rune('m') {
								goto l104
							}
							position++
							if buffer[position] != rune('e') {
								goto l104
							}
							position++
							if !_rules[ruleSP]() {
								goto l104
							}
							if !_rules[ruleanySequence]() {
								goto l104
							}
							if !_rules[ruleSP]() {
								goto l104
							}
							if !_rules[ruleNL]() {
								goto l104
							}
							add(ruleTheme, position105)
						}
						goto l5
					l104:
						position, tokenIndex = position5, tokenIndex5
						{
							switch buffer[position] {
							case '\'':
								{
									position107 := position
									if buffer[position] != rune('\'') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									if !_rules[ruleanySequence]() {
										goto l4
									}
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleComment, position107)
								}
							case '!':
								{
									position108 := position
									if buffer[position] != rune('!') {
										goto l4
									}
									position++
									if buffer[position] != rune('$') {
										goto l4
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l4
									}
									if !_rules[ruleSP]() {
										goto l4
									}
									if buffer[position] != rune('=') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									{
										position109, tokenIndex109 := position, tokenIndex
										if buffer[position] != rune('"') {
											goto l109
										}
										position++
										goto l110
									l109:
										position, tokenIndex = position109, tokenIndex109
									}
								l110:
									if !_rules[ruleanySequence]() {
										goto l4
									}
								l111:
									{
										position112, tokenIndex112 := position, tokenIndex
										if !_rules[ruleanySequence]() {
											goto l112
										}
										goto l111
									l112:
										position, tokenIndex = position112, tokenIndex112
									}
									{
										position113, tokenIndex113 := position, tokenIndex
										if buffer[position] != rune('"') {
											goto l113
										}
										position++
										goto l114
									l113:
										position, tokenIndex = position113, tokenIndex113
									}
								l114:
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleVar, position108)
								}
							case 's':
								{
									position115 := position
									if buffer[position] != rune('s') {
										goto l4
									}
									position++
									if buffer[position] != rune('k') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('n') {
										goto l4
									}
									position++
									if buffer[position] != rune('p') {
										goto l4
									}
									position++
									if buffer[position] != rune('a') {
										goto l4
									}
									position++
									if buffer[position] != rune('r') {
										goto l4
									}
									position++
									if buffer[position] != rune('a') {
										goto l4
									}
									position++
									if buffer[position] != rune('m') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									if !_rules[ruleanySequence]() {
										goto l4
									}
									if !_rules[ruleSP]() {
										goto l4
									}
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleSkinparam, position115)
								}
							case 'h':
								{
									position116 := position
									if buffer[position] != rune('h') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('d') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if buffer[position] != rune(' ') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if buffer[position] != rune('m') {
										goto l4
									}
									position++
									if buffer[position] != rune('p') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('y') {
										goto l4
									}
									position++
									if buffer[position] != rune(' ') {
										goto l4
									}
									position++
									if buffer[position] != rune('d') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if buffer[position] != rune('s') {
										goto l4
									}
									position++
									if buffer[position] != rune('c') {
										goto l4
									}
									position++
									if buffer[position] != rune('r') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('p') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('o') {
										goto l4
									}
									position++
									if buffer[position] != rune('n') {
										goto l4
									}
									position++
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleHideEmptyDescription, position116)
								}
							default:
								{
									position117 := position
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('l') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									{
										position118 := position
										if !_rules[ruleanySequence]() {
											goto l4
										}
										add(rulePegText, position118)
									}
									if !_rules[ruleNL]() {
										goto l4
									}
									{
										add(ruleAction2, position)
									}
									add(ruleTitle, position117)
								}
							}
						}

					}
				l5:
					goto l3
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				{
					position120 := position
					if buffer[position] != rune('@') {
						goto l0
					}
					position++
					if buffer[position] != rune('e') {
						goto l0
					}
					position++
					if buffer[position] != rune('n') {
						goto l0
					}
					position++
					if buffer[position] != rune('d') {
						goto l0
					}
					position++
					if buffer[position] != rune('u') {
						goto l0
					}
					position++
					if buffer[position] != rune('m') {
						goto l0
					}
					position++
					if buffer[position] != rune('l') {
						goto l0
					}
					position++
					if !_rules[ruleNL]() {
						goto l0
					}
					add(ruleEnd, position120)
				}
				{
					position121, tokenIndex121 := position, tokenIndex
					if !matchDot() {
						goto l121
					}
					goto l0
				l121:
					position, tokenIndex = position121, tokenIndex121
				}
				add(ruleStateDiagram, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 identifier <- <((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))+> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l122
						}
						position++
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l122
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l122
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l122
						}
						position++
					}
				}

			l124:
				{
					position125, tokenIndex125 := position, tokenIndex
					{
						switch buffer[position] {
						case '_':
							if buffer[position] != rune('_') {
								goto l125
							}
							position++
						case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l125
							}
							position++
						case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l125
							}
							position++
						default:
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l125
							}
							position++
						}
					}

					goto l124
				l125:
					position, tokenIndex = position125, tokenIndex125
				}
				add(ruleidentifier, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 2 anyChar <- <(!([:->] / ((&('/') '/') | (&('\t') '\t') | (&('<') '<') | (&(' ') ' ') | (&('\n') '\n') | (&('\r') '\r'))) .)> */
		func() bool {
			position128, tokenIndex128 := position, tokenIndex
			{
				position129 := position
				{
					position130, tokenIndex130 := position, tokenIndex
					{
						position131, tokenIndex131 := position, tokenIndex
						if c := buffer[position]; c < rune(':') || c > rune('>') {
							goto l132
						}
						position++
						goto l131
					l132:
						position, tokenIndex = position131, tokenIndex131
						{
							switch buffer[position] {
							case '/':
								if buffer[position] != rune('/') {
									goto l130
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l130
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l130
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l130
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l130
								}
								position++
							default:
								if buffer[position] != rune('\r') {
									goto l130
								}
								position++
							}
						}

					}
				l131:
					goto l128
				l130:
					position, tokenIndex = position130, tokenIndex130
				}
				if !matchDot() {
					goto l128
				}
				add(ruleanyChar, position129)
			}
			return true
		l128:
			position, tokenIndex = position128, tokenIndex128
			return false
		},
		/* 3 anySequence <- <(!('\r' / '\n') .)+> */
		func() bool {
			position134, tokenIndex134 := position, tokenIndex
			{
				position135 := position
				{
					position138, tokenIndex138 := position, tokenIndex
					{
						position139, tokenIndex139 := position, tokenIndex
						if buffer[position] != rune('\r') {
							goto l140
						}
						position++
						goto l139
					l140:
						position, tokenIndex = position139, tokenIndex139
						if buffer[position] != rune('\n') {
							goto l138
						}
						position++
					}
				l139:
					goto l134
				l138:
					position, tokenIndex = position138, tokenIndex138
				}
				if !matchDot() {
					goto l134
				}
			l136:
				{
					position137, tokenIndex137 := position, tokenIndex
					{
						position141, tokenIndex141 := position, tokenIndex
						{
							position142, tokenIndex142 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l143
							}
							position++
							goto l142
						l143:
							position, tokenIndex = position142, tokenIndex142
							if buffer[position] != rune('\n') {
								goto l141
							}
							position++
						}
					l142:
						goto l137
					l141:
						position, tokenIndex = position141, tokenIndex141
					}
					if !matchDot() {
						goto l137
					}
					goto l136
				l137:
					position, tokenIndex = position137, tokenIndex137
				}
				add(ruleanySequence, position135)
			}
			return true
		l134:
			position, tokenIndex = position134, tokenIndex134
			return false
		},
		/* 4 NL <- <(('\r' '\n') / '\n')*> */
		func() bool {
			{
				position145 := position
			l146:
				{
					position147, tokenIndex147 := position, tokenIndex
					{
						position148, tokenIndex148 := position, tokenIndex
						if buffer[position] != rune('\r') {
							goto l149
						}
						position++
						if buffer[position] != rune('\n') {
							goto l149
						}
						position++
						goto l148
					l149:
						position, tokenIndex = position148, tokenIndex148
						if buffer[position] != rune('\n') {
							goto l147
						}
						position++
					}
				l148:
					goto l146
				l147:
					position, tokenIndex = position147, tokenIndex147
				}
				add(ruleNL, position145)
			}
			return true
		},
		/* 5 SP <- <((&('\\') ('\\' 'n')) | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position151 := position
			l152:
				{
					position153, tokenIndex153 := position, tokenIndex
					{
						switch buffer[position] {
						case '\\':
							if buffer[position] != rune('\\') {
								goto l153
							}
							position++
							if buffer[position] != rune('n') {
								goto l153
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l153
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l153
							}
							position++
						}
					}

					goto l152
				l153:
					position, tokenIndex = position153, tokenIndex153
				}
				add(ruleSP, position151)
			}
			return true
		},
		/* 6 Word <- <(<anyChar+> Action0)> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				{
					position157 := position
					if !_rules[ruleanyChar]() {
						goto l155
					}
				l158:
					{
						position159, tokenIndex159 := position, tokenIndex
						if !_rules[ruleanyChar]() {
							goto l159
						}
						goto l158
					l159:
						position, tokenIndex = position159, tokenIndex159
					}
					add(rulePegText, position157)
				}
				{
					add(ruleAction0, position)
				}
				add(ruleWord, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 7 Tag <- <('<' '<' <identifier> ('>' '>') Action1)> */
		nil,
		/* 8 Duration <- <<([0-9]+ ((&('d') 'd') | (&('h') 'h') | (&('m') 'm') | (&('s') 's')))>> */
		nil,
		/* 9 Title <- <('t' 'i' 't' 'l' 'e' SP <anySequence> NL Action2)> */
		nil,
		/* 10 Name <- <('!' '$' 'n' 'a' 'm' 'e' SP '=' SP '"' <identifier> '"' NL Action3)> */
		nil,
		/* 11 Version <- <('!' '$' 'v' 'e' 'r' 's' 'i' 'o' 'n' SP '=' SP '"'? <([0-9]+ . [0-9]+)> '"'? NL Action4)> */
		nil,
		/* 12 HideEmptyDescription <- <('h' 'i' 'd' 'e' ' ' 'e' 'm' 'p' 't' 'y' ' ' 'd' 'e' 's' 'c' 'r' 'i' 'p' 't' 'i' 'o' 'n' NL)> */
		nil,
		/* 13 Theme <- <('!' 't' 'h' 'e' 'm' 'e' SP anySequence SP NL)> */
		nil,
		/* 14 Skinparam <- <('s' 'k' 'i' 'n' 'p' 'a' 'r' 'a' 'm' SP anySequence SP NL)> */
		nil,
		/* 15 StateSkin <- <('s' 't' 'a' 't' 'e' SP StateName SP '#' anyChar+ NL)> */
		nil,
		/* 16 Var <- <('!' '$' identifier SP '=' SP '"'? anySequence+ '"'? NL)> */
		nil,
		/* 17 Comment <- <('\'' SP anySequence NL)> */
		nil,
		/* 18 Start <- <('@' 's' 't' 'a' 'r' 't' 'u' 'm' 'l' NL)> */
		nil,
		/* 19 End <- <('@' 'e' 'n' 'd' 'u' 'm' 'l' NL)> */
		nil,
		/* 20 Arr <- <('-' '>')> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if buffer[position] != rune('-') {
					goto l174
				}
				position++
				if buffer[position] != rune('>') {
					goto l174
				}
				position++
				add(ruleArr, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 21 DoubleArr <- <('-' Arr)> */
		func() bool {
			position176, tokenIndex176 := position, tokenIndex
			{
				position177 := position
				if buffer[position] != rune('-') {
					goto l176
				}
				position++
				if !_rules[ruleArr]() {
					goto l176
				}
				add(ruleDoubleArr, position177)
			}
			return true
		l176:
			position, tokenIndex = position176, tokenIndex176
			return false
		},
		/* 22 TripleArr <- <('-' DoubleArr)> */
		nil,
		/* 23 DirectionArr <- <('-' Direction Arr)> */
		nil,
		/* 24 BackArr <- <('<' '-')> */
		func() bool {
			position180, tokenIndex180 := position, tokenIndex
			{
				position181 := position
				if buffer[position] != rune('<') {
					goto l180
				}
				position++
				if buffer[position] != rune('-') {
					goto l180
				}
				position++
				add(ruleBackArr, position181)
			}
			return true
		l180:
			position, tokenIndex = position180, tokenIndex180
			return false
		},
		/* 25 DoubleBackArr <- <(BackArr '-')> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				if !_rules[ruleBackArr]() {
					goto l182
				}
				if buffer[position] != rune('-') {
					goto l182
				}
				position++
				add(ruleDoubleBackArr, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 26 TripleBackArr <- <(DoubleBackArr '-')> */
		nil,
		/* 27 DirectionBackArr <- <(BackArr Direction '-')> */
		nil,
		/* 28 Arrow <- <(Arr / DoubleArr / TripleArr / DirectionArr)> */
		nil,
		/* 29 BackArrow <- <(BackArr / DoubleBackArr / TripleBackArr / DirectionBackArr)> */
		nil,
		/* 30 Direction <- <(('u' 'p') / ('d' 'o' 'w' 'n') / ('r' 'i' 'g' 'h' 't') / ('l' 'e' 'f' 't') / ((&('d') 'd') | (&('u') 'u') | (&('r') 'r') | (&('l') 'l')))> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				{
					position190, tokenIndex190 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l191
					}
					position++
					if buffer[position] != rune('p') {
						goto l191
					}
					position++
					goto l190
				l191:
					position, tokenIndex = position190, tokenIndex190
					if buffer[position] != rune('d') {
						goto l192
					}
					position++
					if buffer[position] != rune('o') {
						goto l192
					}
					position++
					if buffer[position] != rune('w') {
						goto l192
					}
					position++
					if buffer[position] != rune('n') {
						goto l192
					}
					position++
					goto l190
				l192:
					position, tokenIndex = position190, tokenIndex190
					if buffer[position] != rune('r') {
						goto l193
					}
					position++
					if buffer[position] != rune('i') {
						goto l193
					}
					position++
					if buffer[position] != rune('g') {
						goto l193
					}
					position++
					if buffer[position] != rune('h') {
						goto l193
					}
					position++
					if buffer[position] != rune('t') {
						goto l193
					}
					position++
					goto l190
				l193:
					position, tokenIndex = position190, tokenIndex190
					if buffer[position] != rune('l') {
						goto l194
					}
					position++
					if buffer[position] != rune('e') {
						goto l194
					}
					position++
					if buffer[position] != rune('f') {
						goto l194
					}
					position++
					if buffer[position] != rune('t') {
						goto l194
					}
					position++
					goto l190
				l194:
					position, tokenIndex = position190, tokenIndex190
					{
						switch buffer[position] {
						case 'd':
							if buffer[position] != rune('d') {
								goto l188
							}
							position++
						case 'u':
							if buffer[position] != rune('u') {
								goto l188
							}
							position++
						case 'r':
							if buffer[position] != rune('r') {
								goto l188
							}
							position++
						default:
							if buffer[position] != rune('l') {
								goto l188
							}
							position++
						}
					}

				}
			l190:
				add(ruleDirection, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 31 TerminalState <- <('[' '*' ']')> */
		func() bool {
			position196, tokenIndex196 := position, tokenIndex
			{
				position197 := position
				if buffer[position] != rune('[') {
					goto l196
				}
				position++
				if buffer[position] != rune('*') {
					goto l196
				}
				position++
				if buffer[position] != rune(']') {
					goto l196
				}
				position++
				add(ruleTerminalState, position197)
			}
			return true
		l196:
			position, tokenIndex = position196, tokenIndex196
			return false
		},
		/* 32 StateFrom <- <((TerminalState Action5) / (Word Action6))> */
		func() bool {
			position198, tokenIndex198 := position, tokenIndex
			{
				position199 := position
				{
					position200, tokenIndex200 := position, tokenIndex
					if !_rules[ruleTerminalState]() {
						goto l201
					}
					{
						add(ruleAction5, position)
					}
					goto l200
				l201:
					position, tokenIndex = position200, tokenIndex200
					if !_rules[ruleWord]() {
						goto l198
					}
					{
						add(ruleAction6, position)
					}
				}
			l200:
				add(ruleStateFrom, position199)
			}
			return true
		l198:
			position, tokenIndex = position198, tokenIndex198
			return false
		},
		/* 33 StateTo <- <((TerminalState Action7) / (Word Action8))> */
		func() bool {
			position204, tokenIndex204 := position, tokenIndex
			{
				position205 := position
				{
					position206, tokenIndex206 := position, tokenIndex
					if !_rules[ruleTerminalState]() {
						goto l207
					}
					{
						add(ruleAction7, position)
					}
					goto l206
				l207:
					position, tokenIndex = position206, tokenIndex206
					if !_rules[ruleWord]() {
						goto l204
					}
					{
						add(ruleAction8, position)
					}
				}
			l206:
				add(ruleStateTo, position205)
			}
			return true
		l204:
			position, tokenIndex = position204, tokenIndex204
			return false
		},
		/* 34 StateName <- <(Word Action9)> */
		func() bool {
			position210, tokenIndex210 := position, tokenIndex
			{
				position211 := position
				if !_rules[ruleWord]() {
					goto l210
				}
				{
					add(ruleAction9, position)
				}
				add(ruleStateName, position211)
			}
			return true
		l210:
			position, tokenIndex = position210, tokenIndex210
			return false
		},
		/* 35 Delay <- <('d' 'e' 'l' 'a' 'y' '=' Duration Action10)> */
		nil,
		/* 36 contextVarPath <- <('c' 't' 'x' ('.' identifier)+)> */
		nil,
		/* 37 ParamName <- <(<identifier> Action11)> */
		nil,
		/* 38 ParamValue <- <(SP '=' SP '"' <(!'"' .)+> '"' Action12)> */
		nil,
		/* 39 ParamValueFromContext <- <(SP '=' SP <contextVarPath> Action13)> */
		nil,
		/* 40 Param <- <(ParamName (ParamValueFromContext / ParamValue)? Action14)> */
		nil,
		/* 41 HandlerName <- <(<((identifier '.')? identifier)> Action15)> */
		nil,
		/* 42 HandlerParams <- <('(' Param* ')')> */
		nil,
		/* 43 Handler <- <(HandlerName HandlerParams?)> */
		nil,
		/* 44 EventName <- <('[' <identifier> ']' Action16)> */
		nil,
		/* 45 State <- <('s' 't' 'a' 't' 'e' SP StateName SP (Tag SP?)* SP (':' SP (Delay / Handler))? NL Action17)> */
		nil,
		/* 46 Transition <- <(((StateFrom SP Arrow SP StateTo) / (StateTo SP BackArrow SP StateFrom)) SP (':' SP EventName)? NL Action18)> */
		nil,
		nil,
		/* 49 Action0 <- <{ p.word = text }> */
		nil,
		/* 50 Action1 <- <{ p.AddTag(text) }> */
		nil,
		/* 51 Action2 <- <{ p.Title = text }> */
		nil,
		/* 52 Action3 <- <{ p.setName(text) }> */
		nil,
		/* 53 Action4 <- <{ p.setVersion(text) }> */
		nil,
		/* 54 Action5 <- <{ p.stateFrom = "START" }> */
		nil,
		/* 55 Action6 <- <{ p.stateFrom = p.word }> */
		nil,
		/* 56 Action7 <- <{ p.stateTo = "END" }> */
		nil,
		/* 57 Action8 <- <{ p.stateTo = p.word }> */
		nil,
		/* 58 Action9 <- <{ p.stateName = p.word }> */
		nil,
		/* 59 Action10 <- <{ p.delay = text }> */
		nil,
		/* 60 Action11 <- <{ p.paramName = text }> */
		nil,
		/* 61 Action12 <- <{ p.paramValue = text }> */
		nil,
		/* 62 Action13 <- <{ p.contextVarPath = text }> */
		nil,
		/* 63 Action14 <- <{ p.appendParam() }> */
		nil,
		/* 64 Action15 <- <{ p.handlerName = text }> */
		nil,
		/* 65 Action16 <- <{ p.eventName = text}> */
		nil,
		/* 66 Action17 <- <{
		    dto := &AddStateDto {
		        StateName: p.stateName,
		        Handler: p.handlerName,
		        Params: p.params,
		    }
		    p.AddState(dto);
		    p.clearState()
		}> */
		nil,
		/* 67 Action18 <- <{
		    dto := &AddTransitionDto {
		        StateFrom: p.stateFrom,
		        StateTo: p.stateTo,
		        Event: p.eventName,
		    }
		    p.AddTransition(dto);
		    p.clearState()
		}> */
		nil,
	}
	p.rules = _rules
	return nil
}
