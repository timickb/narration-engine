package parser

// Code generated by peg -switch -inline -output state_diagram.gen.go state_diagram.peg DO NOT EDIT.

import (
	"fmt"
	"github.com/timickb/narration-engine/internal/domain"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleStateDiagram
	ruleidentifier
	ruleanyChar
	ruleanySequence
	ruleNL
	ruleSP
	ruleWord
	ruleTag
	ruleDuration
	ruleTitle
	ruleName
	ruleVersion
	ruleHideEmptyDescription
	ruleTheme
	ruleSkinparam
	ruleStateSkin
	ruleVar
	ruleComment
	ruleStart
	ruleEnd
	ruleArr
	ruleDoubleArr
	ruleTripleArr
	ruleDirectionArr
	ruleBackArr
	ruleDoubleBackArr
	ruleTripleBackArr
	ruleDirectionBackArr
	ruleArrow
	ruleBackArrow
	ruleDirection
	ruleTerminalState
	ruleStateFrom
	ruleStateTo
	ruleStateName
	ruleDelay
	ruleRetryLabel
	ruleRetryLabelName
	ruleRetryLabelValue
	ruleRetry
	ruleRetryAssignLabel
	ruleRetryParams
	rulecontextVarPath
	ruleParamName
	ruleParamValue
	ruleParamValueFromContext
	ruleParam
	ruleHandlerName
	ruleHandlerParams
	ruleHandler
	ruleEventName
	ruleState
	ruleTransition
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
)

var rul3s = [...]string{
	"Unknown",
	"StateDiagram",
	"identifier",
	"anyChar",
	"anySequence",
	"NL",
	"SP",
	"Word",
	"Tag",
	"Duration",
	"Title",
	"HandlerName",
	"Version",
	"HideEmptyDescription",
	"Theme",
	"Skinparam",
	"StateSkin",
	"Var",
	"Comment",
	"Start",
	"End",
	"Arr",
	"DoubleArr",
	"TripleArr",
	"DirectionArr",
	"BackArr",
	"DoubleBackArr",
	"TripleBackArr",
	"DirectionBackArr",
	"Arrow",
	"BackArrow",
	"Direction",
	"TerminalState",
	"StateFrom",
	"StateTo",
	"StateName",
	"Delay",
	"RetryLabel",
	"RetryLabelName",
	"RetryLabelValue",
	"Retry",
	"RetryAssignLabel",
	"RetryParams",
	"contextVarPath",
	"ParamName",
	"ParamValue",
	"ParamValueFromContext",
	"Param",
	"HandlerName",
	"HandlerParams",
	"Handler",
	"EventName",
	"State",
	"Transition",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type StateDiagram struct {
	States
	Transitions

	Name        string
	Title       string
	Version     string
	RetryLabels map[string]string

	word           string
	tags           []string
	params         map[string]domain.StateParamValue
	stateFrom      string
	stateTo        string
	stateName      string
	eventName      string
	handlerName    string
	paramName      string
	paramValue     string
	contextVarPath string

	delay            string
	retryLabelName   string
	retryLabelValue  string
	retryParams      string
	retryAssignLabel string

	Buffer string
	buffer []rune
	rules  [79]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *StateDiagram) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *StateDiagram) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *StateDiagram
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *StateDiagram) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *StateDiagram) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *StateDiagram) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *StateDiagram) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.word = text
		case ruleAction1:
			p.AddTag(text)
		case ruleAction2:
			p.Title = text
		case ruleAction3:
			p.setName(text)
		case ruleAction4:
			p.setVersion(text)
		case ruleAction5:
			p.stateFrom = "START"
		case ruleAction6:
			p.stateFrom = p.word
		case ruleAction7:
			p.stateTo = "END"
		case ruleAction8:
			p.stateTo = p.word
		case ruleAction9:
			p.stateName = p.word
		case ruleAction10:
			p.delay = text
		case ruleAction11:
			p.AddRetryLabel(p.retryLabelName, p.retryLabelValue)
		case ruleAction12:
			p.retryLabelName = text
		case ruleAction13:
			p.retryLabelValue = text
		case ruleAction14:
			p.retryAssignLabel = text
		case ruleAction15:
			p.retryParams = text
		case ruleAction16:
			p.paramName = text
		case ruleAction17:
			p.paramValue = text
		case ruleAction18:
			p.contextVarPath = text
		case ruleAction19:
			p.appendParam()
		case ruleAction20:
			p.handlerName = text
		case ruleAction21:
			p.eventName = text
		case ruleAction22:

			dto := &AddStateDto{
				StateName: p.stateName,
				Handler:   p.handlerName,
				Params:    p.params,
			}
			p.AddState(dto)
			p.clearState()

		case ruleAction23:

			dto := &AddTransitionDto{
				StateFrom: p.stateFrom,
				StateTo:   p.stateTo,
				Event:     p.eventName,
			}
			p.AddTransition(dto)
			p.clearState()

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*StateDiagram) error {
	return func(p *StateDiagram) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*StateDiagram) error {
	return func(p *StateDiagram) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *StateDiagram) Init(options ...func(*StateDiagram) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 StateDiagram <- <(Start (Version / HandlerName / Transition / StateSkin / State / RetryLabel / Theme / ((&('\'') Comment) | (&('!') Var) | (&('s') Skinparam) | (&('h') HideEmptyDescription) | (&('t') Title)))* End !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2 := position
					if buffer[position] != rune('@') {
						goto l0
					}
					position++
					if buffer[position] != rune('s') {
						goto l0
					}
					position++
					if buffer[position] != rune('t') {
						goto l0
					}
					position++
					if buffer[position] != rune('a') {
						goto l0
					}
					position++
					if buffer[position] != rune('r') {
						goto l0
					}
					position++
					if buffer[position] != rune('t') {
						goto l0
					}
					position++
					if buffer[position] != rune('u') {
						goto l0
					}
					position++
					if buffer[position] != rune('m') {
						goto l0
					}
					position++
					if buffer[position] != rune('l') {
						goto l0
					}
					position++
					if !_rules[ruleNL]() {
						goto l0
					}
					add(ruleStart, position2)
				}
			l3:
				{
					position4, tokenIndex4 := position, tokenIndex
					{
						position5, tokenIndex5 := position, tokenIndex
						{
							position7 := position
							if buffer[position] != rune('!') {
								goto l6
							}
							position++
							if buffer[position] != rune('$') {
								goto l6
							}
							position++
							if buffer[position] != rune('v') {
								goto l6
							}
							position++
							if buffer[position] != rune('e') {
								goto l6
							}
							position++
							if buffer[position] != rune('r') {
								goto l6
							}
							position++
							if buffer[position] != rune('s') {
								goto l6
							}
							position++
							if buffer[position] != rune('i') {
								goto l6
							}
							position++
							if buffer[position] != rune('o') {
								goto l6
							}
							position++
							if buffer[position] != rune('n') {
								goto l6
							}
							position++
							if !_rules[ruleSP]() {
								goto l6
							}
							if buffer[position] != rune('=') {
								goto l6
							}
							position++
							if !_rules[ruleSP]() {
								goto l6
							}
							{
								position8, tokenIndex8 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l8
								}
								position++
								goto l9
							l8:
								position, tokenIndex = position8, tokenIndex8
							}
						l9:
							{
								position10 := position
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l6
								}
								position++
							l11:
								{
									position12, tokenIndex12 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l12
									}
									position++
									goto l11
								l12:
									position, tokenIndex = position12, tokenIndex12
								}
								if !matchDot() {
									goto l6
								}
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l6
								}
								position++
							l13:
								{
									position14, tokenIndex14 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l14
									}
									position++
									goto l13
								l14:
									position, tokenIndex = position14, tokenIndex14
								}
								add(rulePegText, position10)
							}
							{
								position15, tokenIndex15 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l15
								}
								position++
								goto l16
							l15:
								position, tokenIndex = position15, tokenIndex15
							}
						l16:
							if !_rules[ruleNL]() {
								goto l6
							}
							{
								add(ruleAction4, position)
							}
							add(ruleVersion, position7)
						}
						goto l5
					l6:
						position, tokenIndex = position5, tokenIndex5
						{
							position19 := position
							if buffer[position] != rune('!') {
								goto l18
							}
							position++
							if buffer[position] != rune('$') {
								goto l18
							}
							position++
							if buffer[position] != rune('n') {
								goto l18
							}
							position++
							if buffer[position] != rune('a') {
								goto l18
							}
							position++
							if buffer[position] != rune('m') {
								goto l18
							}
							position++
							if buffer[position] != rune('e') {
								goto l18
							}
							position++
							if !_rules[ruleSP]() {
								goto l18
							}
							if buffer[position] != rune('=') {
								goto l18
							}
							position++
							if !_rules[ruleSP]() {
								goto l18
							}
							if buffer[position] != rune('"') {
								goto l18
							}
							position++
							{
								position20 := position
								if !_rules[ruleidentifier]() {
									goto l18
								}
								add(rulePegText, position20)
							}
							if buffer[position] != rune('"') {
								goto l18
							}
							position++
							if !_rules[ruleNL]() {
								goto l18
							}
							{
								add(ruleAction3, position)
							}
							add(ruleName, position19)
						}
						goto l5
					l18:
						position, tokenIndex = position5, tokenIndex5
						{
							position23 := position
							{
								position24, tokenIndex24 := position, tokenIndex
								if !_rules[ruleStateFrom]() {
									goto l25
								}
								if !_rules[ruleSP]() {
									goto l25
								}
								{
									position26 := position
									{
										position27, tokenIndex27 := position, tokenIndex
										if !_rules[ruleArr]() {
											goto l28
										}
										goto l27
									l28:
										position, tokenIndex = position27, tokenIndex27
										if !_rules[ruleDoubleArr]() {
											goto l29
										}
										goto l27
									l29:
										position, tokenIndex = position27, tokenIndex27
										{
											position31 := position
											if buffer[position] != rune('-') {
												goto l30
											}
											position++
											if !_rules[ruleDoubleArr]() {
												goto l30
											}
											add(ruleTripleArr, position31)
										}
										goto l27
									l30:
										position, tokenIndex = position27, tokenIndex27
										{
											position32 := position
											if buffer[position] != rune('-') {
												goto l25
											}
											position++
											if !_rules[ruleDirection]() {
												goto l25
											}
											if !_rules[ruleArr]() {
												goto l25
											}
											add(ruleDirectionArr, position32)
										}
									}
								l27:
									add(ruleArrow, position26)
								}
								if !_rules[ruleSP]() {
									goto l25
								}
								if !_rules[ruleStateTo]() {
									goto l25
								}
								goto l24
							l25:
								position, tokenIndex = position24, tokenIndex24
								if !_rules[ruleStateTo]() {
									goto l22
								}
								if !_rules[ruleSP]() {
									goto l22
								}
								{
									position33 := position
									{
										position34, tokenIndex34 := position, tokenIndex
										if !_rules[ruleBackArr]() {
											goto l35
										}
										goto l34
									l35:
										position, tokenIndex = position34, tokenIndex34
										if !_rules[ruleDoubleBackArr]() {
											goto l36
										}
										goto l34
									l36:
										position, tokenIndex = position34, tokenIndex34
										{
											position38 := position
											if !_rules[ruleDoubleBackArr]() {
												goto l37
											}
											if buffer[position] != rune('-') {
												goto l37
											}
											position++
											add(ruleTripleBackArr, position38)
										}
										goto l34
									l37:
										position, tokenIndex = position34, tokenIndex34
										{
											position39 := position
											if !_rules[ruleBackArr]() {
												goto l22
											}
											if !_rules[ruleDirection]() {
												goto l22
											}
											if buffer[position] != rune('-') {
												goto l22
											}
											position++
											add(ruleDirectionBackArr, position39)
										}
									}
								l34:
									add(ruleBackArrow, position33)
								}
								if !_rules[ruleSP]() {
									goto l22
								}
								if !_rules[ruleStateFrom]() {
									goto l22
								}
							}
						l24:
							if !_rules[ruleSP]() {
								goto l22
							}
							{
								position40, tokenIndex40 := position, tokenIndex
								if buffer[position] != rune(':') {
									goto l40
								}
								position++
								if !_rules[ruleSP]() {
									goto l40
								}
								{
									position42 := position
									if buffer[position] != rune('[') {
										goto l40
									}
									position++
									{
										position43 := position
										if !_rules[ruleidentifier]() {
											goto l40
										}
										add(rulePegText, position43)
									}
									if buffer[position] != rune(']') {
										goto l40
									}
									position++
									{
										add(ruleAction21, position)
									}
									add(ruleEventName, position42)
								}
								goto l41
							l40:
								position, tokenIndex = position40, tokenIndex40
							}
						l41:
							if !_rules[ruleNL]() {
								goto l22
							}
							{
								add(ruleAction23, position)
							}
							add(ruleTransition, position23)
						}
						goto l5
					l22:
						position, tokenIndex = position5, tokenIndex5
						{
							position47 := position
							if buffer[position] != rune('s') {
								goto l46
							}
							position++
							if buffer[position] != rune('t') {
								goto l46
							}
							position++
							if buffer[position] != rune('a') {
								goto l46
							}
							position++
							if buffer[position] != rune('t') {
								goto l46
							}
							position++
							if buffer[position] != rune('e') {
								goto l46
							}
							position++
							if !_rules[ruleSP]() {
								goto l46
							}
							if !_rules[ruleStateName]() {
								goto l46
							}
							if !_rules[ruleSP]() {
								goto l46
							}
							if buffer[position] != rune('#') {
								goto l46
							}
							position++
							if !_rules[ruleanyChar]() {
								goto l46
							}
						l48:
							{
								position49, tokenIndex49 := position, tokenIndex
								if !_rules[ruleanyChar]() {
									goto l49
								}
								goto l48
							l49:
								position, tokenIndex = position49, tokenIndex49
							}
							if !_rules[ruleNL]() {
								goto l46
							}
							add(ruleStateSkin, position47)
						}
						goto l5
					l46:
						position, tokenIndex = position5, tokenIndex5
						{
							position51 := position
							if buffer[position] != rune('s') {
								goto l50
							}
							position++
							if buffer[position] != rune('t') {
								goto l50
							}
							position++
							if buffer[position] != rune('a') {
								goto l50
							}
							position++
							if buffer[position] != rune('t') {
								goto l50
							}
							position++
							if buffer[position] != rune('e') {
								goto l50
							}
							position++
							if !_rules[ruleSP]() {
								goto l50
							}
							if !_rules[ruleStateName]() {
								goto l50
							}
							if !_rules[ruleSP]() {
								goto l50
							}
						l52:
							{
								position53, tokenIndex53 := position, tokenIndex
								{
									position54 := position
									if buffer[position] != rune('<') {
										goto l53
									}
									position++
									if buffer[position] != rune('<') {
										goto l53
									}
									position++
									{
										position55 := position
										if !_rules[ruleidentifier]() {
											goto l53
										}
										add(rulePegText, position55)
									}
									if buffer[position] != rune('>') {
										goto l53
									}
									position++
									if buffer[position] != rune('>') {
										goto l53
									}
									position++
									{
										add(ruleAction1, position)
									}
									add(ruleTag, position54)
								}
								{
									position57, tokenIndex57 := position, tokenIndex
									if !_rules[ruleSP]() {
										goto l57
									}
									goto l58
								l57:
									position, tokenIndex = position57, tokenIndex57
								}
							l58:
								goto l52
							l53:
								position, tokenIndex = position53, tokenIndex53
							}
							if !_rules[ruleSP]() {
								goto l50
							}
							{
								position59, tokenIndex59 := position, tokenIndex
								if buffer[position] != rune(':') {
									goto l59
								}
								position++
								if !_rules[ruleSP]() {
									goto l59
								}
								{
									position61, tokenIndex61 := position, tokenIndex
									if !_rules[ruleDelay]() {
										goto l62
									}
									goto l61
								l62:
									position, tokenIndex = position61, tokenIndex61
									if !_rules[ruleRetry]() {
										goto l63
									}
									goto l61
								l63:
									position, tokenIndex = position61, tokenIndex61
									if !_rules[ruleDelay]() {
										goto l64
									}
									if !_rules[ruleSP]() {
										goto l64
									}
									if !_rules[ruleRetry]() {
										goto l64
									}
									goto l61
								l64:
									position, tokenIndex = position61, tokenIndex61
									if !_rules[ruleRetry]() {
										goto l65
									}
									if !_rules[ruleSP]() {
										goto l65
									}
									if !_rules[ruleDelay]() {
										goto l65
									}
									goto l61
								l65:
									position, tokenIndex = position61, tokenIndex61
									{
										position66 := position
										{
											position67 := position
											{
												position68 := position
												{
													position69, tokenIndex69 := position, tokenIndex
													if !_rules[ruleidentifier]() {
														goto l69
													}
													if buffer[position] != rune('.') {
														goto l69
													}
													position++
													goto l70
												l69:
													position, tokenIndex = position69, tokenIndex69
												}
											l70:
												if !_rules[ruleidentifier]() {
													goto l59
												}
												add(rulePegText, position68)
											}
											{
												add(ruleAction20, position)
											}
											add(ruleHandlerName, position67)
										}
										{
											position72, tokenIndex72 := position, tokenIndex
											{
												position74 := position
												if buffer[position] != rune('(') {
													goto l72
												}
												position++
												{
													position75, tokenIndex75 := position, tokenIndex
													if !_rules[ruleParam]() {
														goto l75
													}
												l77:
													{
														position78, tokenIndex78 := position, tokenIndex
														if buffer[position] != rune(',') {
															goto l78
														}
														position++
														if !_rules[ruleSP]() {
															goto l78
														}
														if !_rules[ruleParam]() {
															goto l78
														}
														goto l77
													l78:
														position, tokenIndex = position78, tokenIndex78
													}
													goto l76
												l75:
													position, tokenIndex = position75, tokenIndex75
												}
											l76:
												if buffer[position] != rune(')') {
													goto l72
												}
												position++
												add(ruleHandlerParams, position74)
											}
											goto l73
										l72:
											position, tokenIndex = position72, tokenIndex72
										}
									l73:
										add(ruleHandler, position66)
									}
								}
							l61:
								goto l60
							l59:
								position, tokenIndex = position59, tokenIndex59
							}
						l60:
							if !_rules[ruleNL]() {
								goto l50
							}
							{
								add(ruleAction22, position)
							}
							add(ruleState, position51)
						}
						goto l5
					l50:
						position, tokenIndex = position5, tokenIndex5
						{
							position81 := position
							{
								position82 := position
								if buffer[position] != rune('!') {
									goto l80
								}
								position++
								if buffer[position] != rune('$') {
									goto l80
								}
								position++
								if buffer[position] != rune('r') {
									goto l80
								}
								position++
								if buffer[position] != rune('e') {
									goto l80
								}
								position++
								if buffer[position] != rune('t') {
									goto l80
								}
								position++
								if buffer[position] != rune('r') {
									goto l80
								}
								position++
								if buffer[position] != rune('y') {
									goto l80
								}
								position++
								if buffer[position] != rune('_') {
									goto l80
								}
								position++
								{
									position83 := position
									if !_rules[ruleidentifier]() {
										goto l80
									}
									add(rulePegText, position83)
								}
								{
									add(ruleAction12, position)
								}
								add(ruleRetryLabelName, position82)
							}
							if !_rules[ruleSP]() {
								goto l80
							}
							if buffer[position] != rune('=') {
								goto l80
							}
							position++
							if !_rules[ruleSP]() {
								goto l80
							}
							if buffer[position] != rune('"') {
								goto l80
							}
							position++
							{
								position85 := position
								{
									position86 := position
									if !_rules[ruleRetryParams]() {
										goto l80
									}
									{
										add(ruleAction13, position)
									}
									add(ruleRetryLabelValue, position86)
								}
								add(rulePegText, position85)
							}
							if buffer[position] != rune('"') {
								goto l80
							}
							position++
							if !_rules[ruleNL]() {
								goto l80
							}
							{
								add(ruleAction11, position)
							}
							add(ruleRetryLabel, position81)
						}
						goto l5
					l80:
						position, tokenIndex = position5, tokenIndex5
						{
							position90 := position
							if buffer[position] != rune('!') {
								goto l89
							}
							position++
							if buffer[position] != rune('t') {
								goto l89
							}
							position++
							if buffer[position] != rune('h') {
								goto l89
							}
							position++
							if buffer[position] != rune('e') {
								goto l89
							}
							position++
							if buffer[position] != rune('m') {
								goto l89
							}
							position++
							if buffer[position] != rune('e') {
								goto l89
							}
							position++
							if !_rules[ruleSP]() {
								goto l89
							}
							if !_rules[ruleanySequence]() {
								goto l89
							}
							if !_rules[ruleSP]() {
								goto l89
							}
							if !_rules[ruleNL]() {
								goto l89
							}
							add(ruleTheme, position90)
						}
						goto l5
					l89:
						position, tokenIndex = position5, tokenIndex5
						{
							switch buffer[position] {
							case '\'':
								{
									position92 := position
									if buffer[position] != rune('\'') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									if !_rules[ruleanySequence]() {
										goto l4
									}
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleComment, position92)
								}
							case '!':
								{
									position93 := position
									if buffer[position] != rune('!') {
										goto l4
									}
									position++
									if buffer[position] != rune('$') {
										goto l4
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l4
									}
									if !_rules[ruleSP]() {
										goto l4
									}
									if buffer[position] != rune('=') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									{
										position94, tokenIndex94 := position, tokenIndex
										if buffer[position] != rune('"') {
											goto l94
										}
										position++
										goto l95
									l94:
										position, tokenIndex = position94, tokenIndex94
									}
								l95:
									if !_rules[ruleanySequence]() {
										goto l4
									}
								l96:
									{
										position97, tokenIndex97 := position, tokenIndex
										if !_rules[ruleanySequence]() {
											goto l97
										}
										goto l96
									l97:
										position, tokenIndex = position97, tokenIndex97
									}
									{
										position98, tokenIndex98 := position, tokenIndex
										if buffer[position] != rune('"') {
											goto l98
										}
										position++
										goto l99
									l98:
										position, tokenIndex = position98, tokenIndex98
									}
								l99:
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleVar, position93)
								}
							case 's':
								{
									position100 := position
									if buffer[position] != rune('s') {
										goto l4
									}
									position++
									if buffer[position] != rune('k') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('n') {
										goto l4
									}
									position++
									if buffer[position] != rune('p') {
										goto l4
									}
									position++
									if buffer[position] != rune('a') {
										goto l4
									}
									position++
									if buffer[position] != rune('r') {
										goto l4
									}
									position++
									if buffer[position] != rune('a') {
										goto l4
									}
									position++
									if buffer[position] != rune('m') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									if !_rules[ruleanySequence]() {
										goto l4
									}
									if !_rules[ruleSP]() {
										goto l4
									}
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleSkinparam, position100)
								}
							case 'h':
								{
									position101 := position
									if buffer[position] != rune('h') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('d') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if buffer[position] != rune(' ') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if buffer[position] != rune('m') {
										goto l4
									}
									position++
									if buffer[position] != rune('p') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('y') {
										goto l4
									}
									position++
									if buffer[position] != rune(' ') {
										goto l4
									}
									position++
									if buffer[position] != rune('d') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if buffer[position] != rune('s') {
										goto l4
									}
									position++
									if buffer[position] != rune('c') {
										goto l4
									}
									position++
									if buffer[position] != rune('r') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('p') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('o') {
										goto l4
									}
									position++
									if buffer[position] != rune('n') {
										goto l4
									}
									position++
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleHideEmptyDescription, position101)
								}
							default:
								{
									position102 := position
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('l') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									{
										position103 := position
										if !_rules[ruleanySequence]() {
											goto l4
										}
										add(rulePegText, position103)
									}
									if !_rules[ruleNL]() {
										goto l4
									}
									{
										add(ruleAction2, position)
									}
									add(ruleTitle, position102)
								}
							}
						}

					}
				l5:
					goto l3
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				{
					position105 := position
					if buffer[position] != rune('@') {
						goto l0
					}
					position++
					if buffer[position] != rune('e') {
						goto l0
					}
					position++
					if buffer[position] != rune('n') {
						goto l0
					}
					position++
					if buffer[position] != rune('d') {
						goto l0
					}
					position++
					if buffer[position] != rune('u') {
						goto l0
					}
					position++
					if buffer[position] != rune('m') {
						goto l0
					}
					position++
					if buffer[position] != rune('l') {
						goto l0
					}
					position++
					if !_rules[ruleNL]() {
						goto l0
					}
					add(ruleEnd, position105)
				}
				{
					position106, tokenIndex106 := position, tokenIndex
					if !matchDot() {
						goto l106
					}
					goto l0
				l106:
					position, tokenIndex = position106, tokenIndex106
				}
				add(ruleStateDiagram, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 identifier <- <((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))+> */
		func() bool {
			position107, tokenIndex107 := position, tokenIndex
			{
				position108 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l107
						}
						position++
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l107
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l107
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l107
						}
						position++
					}
				}

			l109:
				{
					position110, tokenIndex110 := position, tokenIndex
					{
						switch buffer[position] {
						case '_':
							if buffer[position] != rune('_') {
								goto l110
							}
							position++
						case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l110
							}
							position++
						case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l110
							}
							position++
						default:
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l110
							}
							position++
						}
					}

					goto l109
				l110:
					position, tokenIndex = position110, tokenIndex110
				}
				add(ruleidentifier, position108)
			}
			return true
		l107:
			position, tokenIndex = position107, tokenIndex107
			return false
		},
		/* 2 anyChar <- <(!([:->] / ((&('/') '/') | (&('\t') '\t') | (&('<') '<') | (&(' ') ' ') | (&('\n') '\n') | (&('\r') '\r'))) .)> */
		func() bool {
			position113, tokenIndex113 := position, tokenIndex
			{
				position114 := position
				{
					position115, tokenIndex115 := position, tokenIndex
					{
						position116, tokenIndex116 := position, tokenIndex
						if c := buffer[position]; c < rune(':') || c > rune('>') {
							goto l117
						}
						position++
						goto l116
					l117:
						position, tokenIndex = position116, tokenIndex116
						{
							switch buffer[position] {
							case '/':
								if buffer[position] != rune('/') {
									goto l115
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l115
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l115
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l115
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l115
								}
								position++
							default:
								if buffer[position] != rune('\r') {
									goto l115
								}
								position++
							}
						}

					}
				l116:
					goto l113
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
				if !matchDot() {
					goto l113
				}
				add(ruleanyChar, position114)
			}
			return true
		l113:
			position, tokenIndex = position113, tokenIndex113
			return false
		},
		/* 3 anySequence <- <(!('\r' / '\n') .)+> */
		func() bool {
			position119, tokenIndex119 := position, tokenIndex
			{
				position120 := position
				{
					position123, tokenIndex123 := position, tokenIndex
					{
						position124, tokenIndex124 := position, tokenIndex
						if buffer[position] != rune('\r') {
							goto l125
						}
						position++
						goto l124
					l125:
						position, tokenIndex = position124, tokenIndex124
						if buffer[position] != rune('\n') {
							goto l123
						}
						position++
					}
				l124:
					goto l119
				l123:
					position, tokenIndex = position123, tokenIndex123
				}
				if !matchDot() {
					goto l119
				}
			l121:
				{
					position122, tokenIndex122 := position, tokenIndex
					{
						position126, tokenIndex126 := position, tokenIndex
						{
							position127, tokenIndex127 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l128
							}
							position++
							goto l127
						l128:
							position, tokenIndex = position127, tokenIndex127
							if buffer[position] != rune('\n') {
								goto l126
							}
							position++
						}
					l127:
						goto l122
					l126:
						position, tokenIndex = position126, tokenIndex126
					}
					if !matchDot() {
						goto l122
					}
					goto l121
				l122:
					position, tokenIndex = position122, tokenIndex122
				}
				add(ruleanySequence, position120)
			}
			return true
		l119:
			position, tokenIndex = position119, tokenIndex119
			return false
		},
		/* 4 NL <- <(('\r' '\n') / '\n')*> */
		func() bool {
			{
				position130 := position
			l131:
				{
					position132, tokenIndex132 := position, tokenIndex
					{
						position133, tokenIndex133 := position, tokenIndex
						if buffer[position] != rune('\r') {
							goto l134
						}
						position++
						if buffer[position] != rune('\n') {
							goto l134
						}
						position++
						goto l133
					l134:
						position, tokenIndex = position133, tokenIndex133
						if buffer[position] != rune('\n') {
							goto l132
						}
						position++
					}
				l133:
					goto l131
				l132:
					position, tokenIndex = position132, tokenIndex132
				}
				add(ruleNL, position130)
			}
			return true
		},
		/* 5 SP <- <((&('\\') ('\\' 'n')) | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position136 := position
			l137:
				{
					position138, tokenIndex138 := position, tokenIndex
					{
						switch buffer[position] {
						case '\\':
							if buffer[position] != rune('\\') {
								goto l138
							}
							position++
							if buffer[position] != rune('n') {
								goto l138
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l138
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l138
							}
							position++
						}
					}

					goto l137
				l138:
					position, tokenIndex = position138, tokenIndex138
				}
				add(ruleSP, position136)
			}
			return true
		},
		/* 6 Word <- <(<anyChar+> Action0)> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				{
					position142 := position
					if !_rules[ruleanyChar]() {
						goto l140
					}
				l143:
					{
						position144, tokenIndex144 := position, tokenIndex
						if !_rules[ruleanyChar]() {
							goto l144
						}
						goto l143
					l144:
						position, tokenIndex = position144, tokenIndex144
					}
					add(rulePegText, position142)
				}
				{
					add(ruleAction0, position)
				}
				add(ruleWord, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 7 Tag <- <('<' '<' <identifier> ('>' '>') Action1)> */
		nil,
		/* 8 Duration <- <<([0-9]+ ((&('d') 'd') | (&('h') 'h') | (&('m') 'm') | (&('s') 's')))>> */
		nil,
		/* 9 Title <- <('t' 'i' 't' 'l' 'e' SP <anySequence> NL Action2)> */
		nil,
		/* 10 HandlerName <- <('!' '$' 'n' 'a' 'm' 'e' SP '=' SP '"' <identifier> '"' NL Action3)> */
		nil,
		/* 11 Version <- <('!' '$' 'v' 'e' 'r' 's' 'i' 'o' 'n' SP '=' SP '"'? <([0-9]+ . [0-9]+)> '"'? NL Action4)> */
		nil,
		/* 12 HideEmptyDescription <- <('h' 'i' 'd' 'e' ' ' 'e' 'm' 'p' 't' 'y' ' ' 'd' 'e' 's' 'c' 'r' 'i' 'p' 't' 'i' 'o' 'n' NL)> */
		nil,
		/* 13 Theme <- <('!' 't' 'h' 'e' 'm' 'e' SP anySequence SP NL)> */
		nil,
		/* 14 Skinparam <- <('s' 'k' 'i' 'n' 'p' 'a' 'r' 'a' 'm' SP anySequence SP NL)> */
		nil,
		/* 15 StateSkin <- <('s' 't' 'a' 't' 'e' SP StateName SP '#' anyChar+ NL)> */
		nil,
		/* 16 Var <- <('!' '$' identifier SP '=' SP '"'? anySequence+ '"'? NL)> */
		nil,
		/* 17 Comment <- <('\'' SP anySequence NL)> */
		nil,
		/* 18 Start <- <('@' 's' 't' 'a' 'r' 't' 'u' 'm' 'l' NL)> */
		nil,
		/* 19 End <- <('@' 'e' 'n' 'd' 'u' 'm' 'l' NL)> */
		nil,
		/* 20 Arr <- <('-' '>')> */
		func() bool {
			position159, tokenIndex159 := position, tokenIndex
			{
				position160 := position
				if buffer[position] != rune('-') {
					goto l159
				}
				position++
				if buffer[position] != rune('>') {
					goto l159
				}
				position++
				add(ruleArr, position160)
			}
			return true
		l159:
			position, tokenIndex = position159, tokenIndex159
			return false
		},
		/* 21 DoubleArr <- <('-' Arr)> */
		func() bool {
			position161, tokenIndex161 := position, tokenIndex
			{
				position162 := position
				if buffer[position] != rune('-') {
					goto l161
				}
				position++
				if !_rules[ruleArr]() {
					goto l161
				}
				add(ruleDoubleArr, position162)
			}
			return true
		l161:
			position, tokenIndex = position161, tokenIndex161
			return false
		},
		/* 22 TripleArr <- <('-' DoubleArr)> */
		nil,
		/* 23 DirectionArr <- <('-' Direction Arr)> */
		nil,
		/* 24 BackArr <- <('<' '-')> */
		func() bool {
			position165, tokenIndex165 := position, tokenIndex
			{
				position166 := position
				if buffer[position] != rune('<') {
					goto l165
				}
				position++
				if buffer[position] != rune('-') {
					goto l165
				}
				position++
				add(ruleBackArr, position166)
			}
			return true
		l165:
			position, tokenIndex = position165, tokenIndex165
			return false
		},
		/* 25 DoubleBackArr <- <(BackArr '-')> */
		func() bool {
			position167, tokenIndex167 := position, tokenIndex
			{
				position168 := position
				if !_rules[ruleBackArr]() {
					goto l167
				}
				if buffer[position] != rune('-') {
					goto l167
				}
				position++
				add(ruleDoubleBackArr, position168)
			}
			return true
		l167:
			position, tokenIndex = position167, tokenIndex167
			return false
		},
		/* 26 TripleBackArr <- <(DoubleBackArr '-')> */
		nil,
		/* 27 DirectionBackArr <- <(BackArr Direction '-')> */
		nil,
		/* 28 Arrow <- <(Arr / DoubleArr / TripleArr / DirectionArr)> */
		nil,
		/* 29 BackArrow <- <(BackArr / DoubleBackArr / TripleBackArr / DirectionBackArr)> */
		nil,
		/* 30 Direction <- <(('u' 'p') / ('d' 'o' 'w' 'n') / ('r' 'i' 'g' 'h' 't') / ('l' 'e' 'f' 't') / ((&('d') 'd') | (&('u') 'u') | (&('r') 'r') | (&('l') 'l')))> */
		func() bool {
			position173, tokenIndex173 := position, tokenIndex
			{
				position174 := position
				{
					position175, tokenIndex175 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l176
					}
					position++
					if buffer[position] != rune('p') {
						goto l176
					}
					position++
					goto l175
				l176:
					position, tokenIndex = position175, tokenIndex175
					if buffer[position] != rune('d') {
						goto l177
					}
					position++
					if buffer[position] != rune('o') {
						goto l177
					}
					position++
					if buffer[position] != rune('w') {
						goto l177
					}
					position++
					if buffer[position] != rune('n') {
						goto l177
					}
					position++
					goto l175
				l177:
					position, tokenIndex = position175, tokenIndex175
					if buffer[position] != rune('r') {
						goto l178
					}
					position++
					if buffer[position] != rune('i') {
						goto l178
					}
					position++
					if buffer[position] != rune('g') {
						goto l178
					}
					position++
					if buffer[position] != rune('h') {
						goto l178
					}
					position++
					if buffer[position] != rune('t') {
						goto l178
					}
					position++
					goto l175
				l178:
					position, tokenIndex = position175, tokenIndex175
					if buffer[position] != rune('l') {
						goto l179
					}
					position++
					if buffer[position] != rune('e') {
						goto l179
					}
					position++
					if buffer[position] != rune('f') {
						goto l179
					}
					position++
					if buffer[position] != rune('t') {
						goto l179
					}
					position++
					goto l175
				l179:
					position, tokenIndex = position175, tokenIndex175
					{
						switch buffer[position] {
						case 'd':
							if buffer[position] != rune('d') {
								goto l173
							}
							position++
						case 'u':
							if buffer[position] != rune('u') {
								goto l173
							}
							position++
						case 'r':
							if buffer[position] != rune('r') {
								goto l173
							}
							position++
						default:
							if buffer[position] != rune('l') {
								goto l173
							}
							position++
						}
					}

				}
			l175:
				add(ruleDirection, position174)
			}
			return true
		l173:
			position, tokenIndex = position173, tokenIndex173
			return false
		},
		/* 31 TerminalState <- <('[' '*' ']')> */
		func() bool {
			position181, tokenIndex181 := position, tokenIndex
			{
				position182 := position
				if buffer[position] != rune('[') {
					goto l181
				}
				position++
				if buffer[position] != rune('*') {
					goto l181
				}
				position++
				if buffer[position] != rune(']') {
					goto l181
				}
				position++
				add(ruleTerminalState, position182)
			}
			return true
		l181:
			position, tokenIndex = position181, tokenIndex181
			return false
		},
		/* 32 StateFrom <- <((TerminalState Action5) / (Word Action6))> */
		func() bool {
			position183, tokenIndex183 := position, tokenIndex
			{
				position184 := position
				{
					position185, tokenIndex185 := position, tokenIndex
					if !_rules[ruleTerminalState]() {
						goto l186
					}
					{
						add(ruleAction5, position)
					}
					goto l185
				l186:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleWord]() {
						goto l183
					}
					{
						add(ruleAction6, position)
					}
				}
			l185:
				add(ruleStateFrom, position184)
			}
			return true
		l183:
			position, tokenIndex = position183, tokenIndex183
			return false
		},
		/* 33 StateTo <- <((TerminalState Action7) / (Word Action8))> */
		func() bool {
			position189, tokenIndex189 := position, tokenIndex
			{
				position190 := position
				{
					position191, tokenIndex191 := position, tokenIndex
					if !_rules[ruleTerminalState]() {
						goto l192
					}
					{
						add(ruleAction7, position)
					}
					goto l191
				l192:
					position, tokenIndex = position191, tokenIndex191
					if !_rules[ruleWord]() {
						goto l189
					}
					{
						add(ruleAction8, position)
					}
				}
			l191:
				add(ruleStateTo, position190)
			}
			return true
		l189:
			position, tokenIndex = position189, tokenIndex189
			return false
		},
		/* 34 StateName <- <(Word Action9)> */
		func() bool {
			position195, tokenIndex195 := position, tokenIndex
			{
				position196 := position
				if !_rules[ruleWord]() {
					goto l195
				}
				{
					add(ruleAction9, position)
				}
				add(ruleStateName, position196)
			}
			return true
		l195:
			position, tokenIndex = position195, tokenIndex195
			return false
		},
		/* 35 Delay <- <('d' 'e' 'l' 'a' 'y' '=' Duration Action10)> */
		func() bool {
			position198, tokenIndex198 := position, tokenIndex
			{
				position199 := position
				if buffer[position] != rune('d') {
					goto l198
				}
				position++
				if buffer[position] != rune('e') {
					goto l198
				}
				position++
				if buffer[position] != rune('l') {
					goto l198
				}
				position++
				if buffer[position] != rune('a') {
					goto l198
				}
				position++
				if buffer[position] != rune('y') {
					goto l198
				}
				position++
				if buffer[position] != rune('=') {
					goto l198
				}
				position++
				{
					position200 := position
					{
						position201 := position
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l198
						}
						position++
					l202:
						{
							position203, tokenIndex203 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l203
							}
							position++
							goto l202
						l203:
							position, tokenIndex = position203, tokenIndex203
						}
						{
							switch buffer[position] {
							case 'd':
								if buffer[position] != rune('d') {
									goto l198
								}
								position++
							case 'h':
								if buffer[position] != rune('h') {
									goto l198
								}
								position++
							case 'm':
								if buffer[position] != rune('m') {
									goto l198
								}
								position++
							default:
								if buffer[position] != rune('s') {
									goto l198
								}
								position++
							}
						}

						add(rulePegText, position201)
					}
					add(ruleDuration, position200)
				}
				{
					add(ruleAction10, position)
				}
				add(ruleDelay, position199)
			}
			return true
		l198:
			position, tokenIndex = position198, tokenIndex198
			return false
		},
		/* 36 RetryLabel <- <(RetryLabelName SP '=' SP '"' <RetryLabelValue> '"' NL Action11)> */
		nil,
		/* 37 RetryLabelName <- <('!' '$' 'r' 'e' 't' 'r' 'y' '_' <identifier> Action12)> */
		nil,
		/* 38 RetryLabelValue <- <(RetryParams Action13)> */
		nil,
		/* 39 Retry <- <('r' 'e' 't' 'r' 'y' '=' <(RetryParams / RetryAssignLabel)> NL?)> */
		func() bool {
			position209, tokenIndex209 := position, tokenIndex
			{
				position210 := position
				if buffer[position] != rune('r') {
					goto l209
				}
				position++
				if buffer[position] != rune('e') {
					goto l209
				}
				position++
				if buffer[position] != rune('t') {
					goto l209
				}
				position++
				if buffer[position] != rune('r') {
					goto l209
				}
				position++
				if buffer[position] != rune('y') {
					goto l209
				}
				position++
				if buffer[position] != rune('=') {
					goto l209
				}
				position++
				{
					position211 := position
					{
						position212, tokenIndex212 := position, tokenIndex
						if !_rules[ruleRetryParams]() {
							goto l213
						}
						goto l212
					l213:
						position, tokenIndex = position212, tokenIndex212
						{
							position214 := position
							{
								position215 := position
								if !_rules[ruleidentifier]() {
									goto l209
								}
								add(rulePegText, position215)
							}
							{
								add(ruleAction14, position)
							}
							add(ruleRetryAssignLabel, position214)
						}
					}
				l212:
					add(rulePegText, position211)
				}
				{
					position217, tokenIndex217 := position, tokenIndex
					if !_rules[ruleNL]() {
						goto l217
					}
					goto l218
				l217:
					position, tokenIndex = position217, tokenIndex217
				}
			l218:
				add(ruleRetry, position210)
			}
			return true
		l209:
			position, tokenIndex = position209, tokenIndex209
			return false
		},
		/* 40 RetryAssignLabel <- <(<identifier> Action14)> */
		nil,
		/* 41 RetryParams <- <(<(([0-9]+ ((&('d') 'd') | (&('h') 'h') | (&('m') 'm') | (&('s') 's'))? ':')? ([0-9]+ ((&('d') 'd') | (&('h') 'h') | (&('m') 'm') | (&('s') 's'))) (',' [0-9]+ ((&('d') 'd') | (&('h') 'h') | (&('m') 'm') | (&('s') 's')))+ (',' ('\\' / '.') ('\\' / '.') ('\\' / '.'))?)> Action15)> */
		func() bool {
			position220, tokenIndex220 := position, tokenIndex
			{
				position221 := position
				{
					position222 := position
					{
						position223, tokenIndex223 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l223
						}
						position++
					l225:
						{
							position226, tokenIndex226 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l226
							}
							position++
							goto l225
						l226:
							position, tokenIndex = position226, tokenIndex226
						}
						{
							position227, tokenIndex227 := position, tokenIndex
							{
								switch buffer[position] {
								case 'd':
									if buffer[position] != rune('d') {
										goto l227
									}
									position++
								case 'h':
									if buffer[position] != rune('h') {
										goto l227
									}
									position++
								case 'm':
									if buffer[position] != rune('m') {
										goto l227
									}
									position++
								default:
									if buffer[position] != rune('s') {
										goto l227
									}
									position++
								}
							}

							goto l228
						l227:
							position, tokenIndex = position227, tokenIndex227
						}
					l228:
						if buffer[position] != rune(':') {
							goto l223
						}
						position++
						goto l224
					l223:
						position, tokenIndex = position223, tokenIndex223
					}
				l224:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l220
					}
					position++
				l230:
					{
						position231, tokenIndex231 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l231
						}
						position++
						goto l230
					l231:
						position, tokenIndex = position231, tokenIndex231
					}
					{
						switch buffer[position] {
						case 'd':
							if buffer[position] != rune('d') {
								goto l220
							}
							position++
						case 'h':
							if buffer[position] != rune('h') {
								goto l220
							}
							position++
						case 'm':
							if buffer[position] != rune('m') {
								goto l220
							}
							position++
						default:
							if buffer[position] != rune('s') {
								goto l220
							}
							position++
						}
					}

					if buffer[position] != rune(',') {
						goto l220
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l220
					}
					position++
				l235:
					{
						position236, tokenIndex236 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l236
						}
						position++
						goto l235
					l236:
						position, tokenIndex = position236, tokenIndex236
					}
					{
						switch buffer[position] {
						case 'd':
							if buffer[position] != rune('d') {
								goto l220
							}
							position++
						case 'h':
							if buffer[position] != rune('h') {
								goto l220
							}
							position++
						case 'm':
							if buffer[position] != rune('m') {
								goto l220
							}
							position++
						default:
							if buffer[position] != rune('s') {
								goto l220
							}
							position++
						}
					}

				l233:
					{
						position234, tokenIndex234 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l234
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l234
						}
						position++
					l238:
						{
							position239, tokenIndex239 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l239
							}
							position++
							goto l238
						l239:
							position, tokenIndex = position239, tokenIndex239
						}
						{
							switch buffer[position] {
							case 'd':
								if buffer[position] != rune('d') {
									goto l234
								}
								position++
							case 'h':
								if buffer[position] != rune('h') {
									goto l234
								}
								position++
							case 'm':
								if buffer[position] != rune('m') {
									goto l234
								}
								position++
							default:
								if buffer[position] != rune('s') {
									goto l234
								}
								position++
							}
						}

						goto l233
					l234:
						position, tokenIndex = position234, tokenIndex234
					}
					{
						position241, tokenIndex241 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l241
						}
						position++
						{
							position243, tokenIndex243 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l244
							}
							position++
							goto l243
						l244:
							position, tokenIndex = position243, tokenIndex243
							if buffer[position] != rune('.') {
								goto l241
							}
							position++
						}
					l243:
						{
							position245, tokenIndex245 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l246
							}
							position++
							goto l245
						l246:
							position, tokenIndex = position245, tokenIndex245
							if buffer[position] != rune('.') {
								goto l241
							}
							position++
						}
					l245:
						{
							position247, tokenIndex247 := position, tokenIndex
							if buffer[position] != rune('\\') {
								goto l248
							}
							position++
							goto l247
						l248:
							position, tokenIndex = position247, tokenIndex247
							if buffer[position] != rune('.') {
								goto l241
							}
							position++
						}
					l247:
						goto l242
					l241:
						position, tokenIndex = position241, tokenIndex241
					}
				l242:
					add(rulePegText, position222)
				}
				{
					add(ruleAction15, position)
				}
				add(ruleRetryParams, position221)
			}
			return true
		l220:
			position, tokenIndex = position220, tokenIndex220
			return false
		},
		/* 42 contextVarPath <- <('c' 't' 'x' ('.' identifier)+)> */
		nil,
		/* 43 ParamName <- <(<identifier> Action16)> */
		nil,
		/* 44 ParamValue <- <(SP '=' SP '"' <(!'"' .)+> '"' Action17)> */
		nil,
		/* 45 ParamValueFromContext <- <(SP '=' SP <contextVarPath> Action18)> */
		nil,
		/* 46 Param <- <(ParamName (ParamValueFromContext / ParamValue)? Action19)> */
		func() bool {
			position254, tokenIndex254 := position, tokenIndex
			{
				position255 := position
				{
					position256 := position
					{
						position257 := position
						if !_rules[ruleidentifier]() {
							goto l254
						}
						add(rulePegText, position257)
					}
					{
						add(ruleAction16, position)
					}
					add(ruleParamName, position256)
				}
				{
					position259, tokenIndex259 := position, tokenIndex
					{
						position261, tokenIndex261 := position, tokenIndex
						{
							position263 := position
							if !_rules[ruleSP]() {
								goto l262
							}
							if buffer[position] != rune('=') {
								goto l262
							}
							position++
							if !_rules[ruleSP]() {
								goto l262
							}
							{
								position264 := position
								{
									position265 := position
									if buffer[position] != rune('c') {
										goto l262
									}
									position++
									if buffer[position] != rune('t') {
										goto l262
									}
									position++
									if buffer[position] != rune('x') {
										goto l262
									}
									position++
									if buffer[position] != rune('.') {
										goto l262
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l262
									}
								l266:
									{
										position267, tokenIndex267 := position, tokenIndex
										if buffer[position] != rune('.') {
											goto l267
										}
										position++
										if !_rules[ruleidentifier]() {
											goto l267
										}
										goto l266
									l267:
										position, tokenIndex = position267, tokenIndex267
									}
									add(rulecontextVarPath, position265)
								}
								add(rulePegText, position264)
							}
							{
								add(ruleAction18, position)
							}
							add(ruleParamValueFromContext, position263)
						}
						goto l261
					l262:
						position, tokenIndex = position261, tokenIndex261
						{
							position269 := position
							if !_rules[ruleSP]() {
								goto l259
							}
							if buffer[position] != rune('=') {
								goto l259
							}
							position++
							if !_rules[ruleSP]() {
								goto l259
							}
							if buffer[position] != rune('"') {
								goto l259
							}
							position++
							{
								position270 := position
								{
									position273, tokenIndex273 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l273
									}
									position++
									goto l259
								l273:
									position, tokenIndex = position273, tokenIndex273
								}
								if !matchDot() {
									goto l259
								}
							l271:
								{
									position272, tokenIndex272 := position, tokenIndex
									{
										position274, tokenIndex274 := position, tokenIndex
										if buffer[position] != rune('"') {
											goto l274
										}
										position++
										goto l272
									l274:
										position, tokenIndex = position274, tokenIndex274
									}
									if !matchDot() {
										goto l272
									}
									goto l271
								l272:
									position, tokenIndex = position272, tokenIndex272
								}
								add(rulePegText, position270)
							}
							if buffer[position] != rune('"') {
								goto l259
							}
							position++
							{
								add(ruleAction17, position)
							}
							add(ruleParamValue, position269)
						}
					}
				l261:
					goto l260
				l259:
					position, tokenIndex = position259, tokenIndex259
				}
			l260:
				{
					add(ruleAction19, position)
				}
				add(ruleParam, position255)
			}
			return true
		l254:
			position, tokenIndex = position254, tokenIndex254
			return false
		},
		/* 47 HandlerName <- <(<((identifier '.')? identifier)> Action20)> */
		nil,
		/* 48 HandlerParams <- <('(' (Param (',' SP Param)*)? ')')> */
		nil,
		/* 49 Handler <- <(HandlerName HandlerParams?)> */
		nil,
		/* 50 EventName <- <('[' <identifier> ']' Action21)> */
		nil,
		/* 51 State <- <('s' 't' 'a' 't' 'e' SP StateName SP (Tag SP?)* SP (':' SP (Delay / Retry / (Delay SP Retry) / (Retry SP Delay) / Handler))? NL Action22)> */
		nil,
		/* 52 Transition <- <(((StateFrom SP Arrow SP StateTo) / (StateTo SP BackArrow SP StateFrom)) SP (':' SP EventName)? NL Action23)> */
		nil,
		nil,
		/* 55 Action0 <- <{ p.word = text }> */
		nil,
		/* 56 Action1 <- <{ p.AddTag(text) }> */
		nil,
		/* 57 Action2 <- <{ p.Title = text }> */
		nil,
		/* 58 Action3 <- <{ p.setName(text) }> */
		nil,
		/* 59 Action4 <- <{ p.setVersion(text) }> */
		nil,
		/* 60 Action5 <- <{ p.stateFrom = "START" }> */
		nil,
		/* 61 Action6 <- <{ p.stateFrom = p.word }> */
		nil,
		/* 62 Action7 <- <{ p.stateTo = "END" }> */
		nil,
		/* 63 Action8 <- <{ p.stateTo = p.word }> */
		nil,
		/* 64 Action9 <- <{ p.stateName = p.word }> */
		nil,
		/* 65 Action10 <- <{ p.delay = text }> */
		nil,
		/* 66 Action11 <- <{ p.AddRetryLabel(p.retryLabelName, p.retryLabelValue) }> */
		nil,
		/* 67 Action12 <- <{ p.retryLabelName = text }> */
		nil,
		/* 68 Action13 <- <{ p.retryLabelValue = text }> */
		nil,
		/* 69 Action14 <- <{ p.retryAssignLabel = text }> */
		nil,
		/* 70 Action15 <- <{ p.retryParams = text }> */
		nil,
		/* 71 Action16 <- <{ p.paramName = text }> */
		nil,
		/* 72 Action17 <- <{ p.paramValue = text }> */
		nil,
		/* 73 Action18 <- <{ p.contextVarPath = text }> */
		nil,
		/* 74 Action19 <- <{ p.appendParam() }> */
		nil,
		/* 75 Action20 <- <{ p.handlerName = text }> */
		nil,
		/* 76 Action21 <- <{ p.eventName = text}> */
		nil,
		/* 77 Action22 <- <{
		    dto := &AddStateDto {
		        StateName: p.stateName,
		        Handler: p.handlerName,
		        Params: p.params,
		    }
		    p.AddState(dto);
		    p.clearState()
		}> */
		nil,
		/* 78 Action23 <- <{
		    dto := &AddTransitionDto {
		        StateFrom: p.stateFrom,
		        StateTo: p.stateTo,
		        Event: p.eventName,
		    }
		    p.AddTransition(dto);
		    p.clearState()
		}> */
		nil,
	}
	p.rules = _rules
	return nil
}
