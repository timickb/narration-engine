package parser

// Code generated by peg -switch -inline -output state_diagram.gen.go state_diagram.peg DO NOT EDIT.

import (
	"fmt"
	"github.com/timickb/go-stateflow/internal/domain"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleStateDiagram
	ruleidentifier
	ruleanyChar
	ruleanySequence
	ruleNL
	ruleSP
	ruleWord
	ruleTag
	ruleDuration
	ruleTitle
	ruleName
	ruleVersion
	ruleHideEmptyDescription
	ruleTheme
	ruleSkinparam
	ruleStateSkin
	ruleVar
	ruleComment
	ruleStart
	ruleEnd
	ruleArr
	ruleDoubleArr
	ruleTripleArr
	ruleDirectionArr
	ruleBackArr
	ruleDoubleBackArr
	ruleTripleBackArr
	ruleDirectionBackArr
	ruleArrow
	ruleBackArrow
	ruleDirection
	ruleTerminalState
	ruleStateFrom
	ruleStateTo
	ruleStateName
	ruleDelay
	rulecontextVarPath
	ruleParamName
	ruleParamValue
	ruleParamValueFromContext
	ruleParam
	ruleHandlerName
	ruleHandlerParams
	ruleHandler
	ruleEventName
	ruleState
	ruleTransition
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
)

var rul3s = [...]string{
	"Unknown",
	"StateDiagram",
	"identifier",
	"anyChar",
	"anySequence",
	"NL",
	"SP",
	"Word",
	"Tag",
	"Duration",
	"Title",
	"Name",
	"Version",
	"HideEmptyDescription",
	"Theme",
	"Skinparam",
	"StateSkin",
	"Var",
	"Comment",
	"Start",
	"End",
	"Arr",
	"DoubleArr",
	"TripleArr",
	"DirectionArr",
	"BackArr",
	"DoubleBackArr",
	"TripleBackArr",
	"DirectionBackArr",
	"Arrow",
	"BackArrow",
	"Direction",
	"TerminalState",
	"StateFrom",
	"StateTo",
	"StateName",
	"Delay",
	"contextVarPath",
	"ParamName",
	"ParamValue",
	"ParamValueFromContext",
	"Param",
	"HandlerName",
	"HandlerParams",
	"Handler",
	"EventName",
	"State",
	"Transition",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type StateDiagram struct {
	States
	Transitions

	Name    string
	Title   string
	Version string

	word           string
	tags           []string
	params         map[string]domain.StateParamValue
	stateFrom      string
	stateTo        string
	stateName      string
	eventName      string
	handlerName    string
	paramName      string
	paramValue     string
	contextVarPath string
	delay          string

	Buffer string
	buffer []rune
	rules  [68]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *StateDiagram) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *StateDiagram) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *StateDiagram
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *StateDiagram) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *StateDiagram) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *StateDiagram) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *StateDiagram) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.word = text
		case ruleAction1:
			p.AddTag(text)
		case ruleAction2:
			p.Title = text
		case ruleAction3:
			p.setName(text)
		case ruleAction4:
			p.setVersion(text)
		case ruleAction5:
			p.stateFrom = "START"
		case ruleAction6:
			p.stateFrom = p.word
		case ruleAction7:
			p.stateTo = "END"
		case ruleAction8:
			p.stateTo = p.word
		case ruleAction9:
			p.stateName = p.word
		case ruleAction10:
			p.delay = text
		case ruleAction11:
			p.paramName = text
		case ruleAction12:
			p.paramValue = text
		case ruleAction13:
			p.contextVarPath = text
		case ruleAction14:
			p.appendParam()
		case ruleAction15:
			p.handlerName = text
		case ruleAction16:
			p.eventName = text
		case ruleAction17:

			dto := &AddStateDto{
				StateName: p.stateName,
				Handler:   p.handlerName,
				Params:    p.params,
			}
			p.AddState(dto)
			p.clearState()

		case ruleAction18:

			dto := &AddTransitionDto{
				StateFrom: p.stateFrom,
				StateTo:   p.stateTo,
				Event:     p.eventName,
			}
			p.AddTransition(dto)
			p.clearState()

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*StateDiagram) error {
	return func(p *StateDiagram) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*StateDiagram) error {
	return func(p *StateDiagram) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *StateDiagram) Init(options ...func(*StateDiagram) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 StateDiagram <- <(Start (Version / Name / Transition / StateSkin / State / Theme / ((&('\'') Comment) | (&('!') Var) | (&('s') Skinparam) | (&('h') HideEmptyDescription) | (&('t') Title)))* End !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2 := position
					if buffer[position] != rune('@') {
						goto l0
					}
					position++
					if buffer[position] != rune('s') {
						goto l0
					}
					position++
					if buffer[position] != rune('t') {
						goto l0
					}
					position++
					if buffer[position] != rune('a') {
						goto l0
					}
					position++
					if buffer[position] != rune('r') {
						goto l0
					}
					position++
					if buffer[position] != rune('t') {
						goto l0
					}
					position++
					if buffer[position] != rune('u') {
						goto l0
					}
					position++
					if buffer[position] != rune('m') {
						goto l0
					}
					position++
					if buffer[position] != rune('l') {
						goto l0
					}
					position++
					if !_rules[ruleNL]() {
						goto l0
					}
					add(ruleStart, position2)
				}
			l3:
				{
					position4, tokenIndex4 := position, tokenIndex
					{
						position5, tokenIndex5 := position, tokenIndex
						{
							position7 := position
							if buffer[position] != rune('!') {
								goto l6
							}
							position++
							if buffer[position] != rune('$') {
								goto l6
							}
							position++
							if buffer[position] != rune('v') {
								goto l6
							}
							position++
							if buffer[position] != rune('e') {
								goto l6
							}
							position++
							if buffer[position] != rune('r') {
								goto l6
							}
							position++
							if buffer[position] != rune('s') {
								goto l6
							}
							position++
							if buffer[position] != rune('i') {
								goto l6
							}
							position++
							if buffer[position] != rune('o') {
								goto l6
							}
							position++
							if buffer[position] != rune('n') {
								goto l6
							}
							position++
							if !_rules[ruleSP]() {
								goto l6
							}
							if buffer[position] != rune('=') {
								goto l6
							}
							position++
							if !_rules[ruleSP]() {
								goto l6
							}
							{
								position8, tokenIndex8 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l8
								}
								position++
								goto l9
							l8:
								position, tokenIndex = position8, tokenIndex8
							}
						l9:
							{
								position10 := position
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l6
								}
								position++
							l11:
								{
									position12, tokenIndex12 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l12
									}
									position++
									goto l11
								l12:
									position, tokenIndex = position12, tokenIndex12
								}
								if !matchDot() {
									goto l6
								}
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l6
								}
								position++
							l13:
								{
									position14, tokenIndex14 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l14
									}
									position++
									goto l13
								l14:
									position, tokenIndex = position14, tokenIndex14
								}
								add(rulePegText, position10)
							}
							{
								position15, tokenIndex15 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l15
								}
								position++
								goto l16
							l15:
								position, tokenIndex = position15, tokenIndex15
							}
						l16:
							if !_rules[ruleNL]() {
								goto l6
							}
							{
								add(ruleAction4, position)
							}
							add(ruleVersion, position7)
						}
						goto l5
					l6:
						position, tokenIndex = position5, tokenIndex5
						{
							position19 := position
							if buffer[position] != rune('!') {
								goto l18
							}
							position++
							if buffer[position] != rune('$') {
								goto l18
							}
							position++
							if buffer[position] != rune('n') {
								goto l18
							}
							position++
							if buffer[position] != rune('a') {
								goto l18
							}
							position++
							if buffer[position] != rune('m') {
								goto l18
							}
							position++
							if buffer[position] != rune('e') {
								goto l18
							}
							position++
							if !_rules[ruleSP]() {
								goto l18
							}
							if buffer[position] != rune('=') {
								goto l18
							}
							position++
							if !_rules[ruleSP]() {
								goto l18
							}
							if buffer[position] != rune('"') {
								goto l18
							}
							position++
							{
								position20 := position
								if !_rules[ruleidentifier]() {
									goto l18
								}
								add(rulePegText, position20)
							}
							if buffer[position] != rune('"') {
								goto l18
							}
							position++
							if !_rules[ruleNL]() {
								goto l18
							}
							{
								add(ruleAction3, position)
							}
							add(ruleName, position19)
						}
						goto l5
					l18:
						position, tokenIndex = position5, tokenIndex5
						{
							position23 := position
							{
								position24, tokenIndex24 := position, tokenIndex
								if !_rules[ruleStateFrom]() {
									goto l25
								}
								if !_rules[ruleSP]() {
									goto l25
								}
								{
									position26 := position
									{
										position27, tokenIndex27 := position, tokenIndex
										if !_rules[ruleArr]() {
											goto l28
										}
										goto l27
									l28:
										position, tokenIndex = position27, tokenIndex27
										if !_rules[ruleDoubleArr]() {
											goto l29
										}
										goto l27
									l29:
										position, tokenIndex = position27, tokenIndex27
										{
											position31 := position
											if buffer[position] != rune('-') {
												goto l30
											}
											position++
											if !_rules[ruleDoubleArr]() {
												goto l30
											}
											add(ruleTripleArr, position31)
										}
										goto l27
									l30:
										position, tokenIndex = position27, tokenIndex27
										{
											position32 := position
											if buffer[position] != rune('-') {
												goto l25
											}
											position++
											if !_rules[ruleDirection]() {
												goto l25
											}
											if !_rules[ruleArr]() {
												goto l25
											}
											add(ruleDirectionArr, position32)
										}
									}
								l27:
									add(ruleArrow, position26)
								}
								if !_rules[ruleSP]() {
									goto l25
								}
								if !_rules[ruleStateTo]() {
									goto l25
								}
								goto l24
							l25:
								position, tokenIndex = position24, tokenIndex24
								if !_rules[ruleStateTo]() {
									goto l22
								}
								if !_rules[ruleSP]() {
									goto l22
								}
								{
									position33 := position
									{
										position34, tokenIndex34 := position, tokenIndex
										if !_rules[ruleBackArr]() {
											goto l35
										}
										goto l34
									l35:
										position, tokenIndex = position34, tokenIndex34
										if !_rules[ruleDoubleBackArr]() {
											goto l36
										}
										goto l34
									l36:
										position, tokenIndex = position34, tokenIndex34
										{
											position38 := position
											if !_rules[ruleDoubleBackArr]() {
												goto l37
											}
											if buffer[position] != rune('-') {
												goto l37
											}
											position++
											add(ruleTripleBackArr, position38)
										}
										goto l34
									l37:
										position, tokenIndex = position34, tokenIndex34
										{
											position39 := position
											if !_rules[ruleBackArr]() {
												goto l22
											}
											if !_rules[ruleDirection]() {
												goto l22
											}
											if buffer[position] != rune('-') {
												goto l22
											}
											position++
											add(ruleDirectionBackArr, position39)
										}
									}
								l34:
									add(ruleBackArrow, position33)
								}
								if !_rules[ruleSP]() {
									goto l22
								}
								if !_rules[ruleStateFrom]() {
									goto l22
								}
							}
						l24:
							if !_rules[ruleSP]() {
								goto l22
							}
							{
								position40, tokenIndex40 := position, tokenIndex
								if buffer[position] != rune(':') {
									goto l40
								}
								position++
								if !_rules[ruleSP]() {
									goto l40
								}
								{
									position42 := position
									if buffer[position] != rune('[') {
										goto l40
									}
									position++
									{
										position43 := position
										if !_rules[ruleidentifier]() {
											goto l40
										}
										add(rulePegText, position43)
									}
									if buffer[position] != rune(']') {
										goto l40
									}
									position++
									{
										add(ruleAction16, position)
									}
									add(ruleEventName, position42)
								}
								goto l41
							l40:
								position, tokenIndex = position40, tokenIndex40
							}
						l41:
							if !_rules[ruleNL]() {
								goto l22
							}
							{
								add(ruleAction18, position)
							}
							add(ruleTransition, position23)
						}
						goto l5
					l22:
						position, tokenIndex = position5, tokenIndex5
						{
							position47 := position
							if buffer[position] != rune('s') {
								goto l46
							}
							position++
							if buffer[position] != rune('t') {
								goto l46
							}
							position++
							if buffer[position] != rune('a') {
								goto l46
							}
							position++
							if buffer[position] != rune('t') {
								goto l46
							}
							position++
							if buffer[position] != rune('e') {
								goto l46
							}
							position++
							if !_rules[ruleSP]() {
								goto l46
							}
							if !_rules[ruleStateName]() {
								goto l46
							}
							if !_rules[ruleSP]() {
								goto l46
							}
							if buffer[position] != rune('#') {
								goto l46
							}
							position++
							if !_rules[ruleanyChar]() {
								goto l46
							}
						l48:
							{
								position49, tokenIndex49 := position, tokenIndex
								if !_rules[ruleanyChar]() {
									goto l49
								}
								goto l48
							l49:
								position, tokenIndex = position49, tokenIndex49
							}
							if !_rules[ruleNL]() {
								goto l46
							}
							add(ruleStateSkin, position47)
						}
						goto l5
					l46:
						position, tokenIndex = position5, tokenIndex5
						{
							position51 := position
							if buffer[position] != rune('s') {
								goto l50
							}
							position++
							if buffer[position] != rune('t') {
								goto l50
							}
							position++
							if buffer[position] != rune('a') {
								goto l50
							}
							position++
							if buffer[position] != rune('t') {
								goto l50
							}
							position++
							if buffer[position] != rune('e') {
								goto l50
							}
							position++
							if !_rules[ruleSP]() {
								goto l50
							}
							if !_rules[ruleStateName]() {
								goto l50
							}
							if !_rules[ruleSP]() {
								goto l50
							}
						l52:
							{
								position53, tokenIndex53 := position, tokenIndex
								{
									position54 := position
									if buffer[position] != rune('<') {
										goto l53
									}
									position++
									if buffer[position] != rune('<') {
										goto l53
									}
									position++
									{
										position55 := position
										if !_rules[ruleidentifier]() {
											goto l53
										}
										add(rulePegText, position55)
									}
									if buffer[position] != rune('>') {
										goto l53
									}
									position++
									if buffer[position] != rune('>') {
										goto l53
									}
									position++
									{
										add(ruleAction1, position)
									}
									add(ruleTag, position54)
								}
								{
									position57, tokenIndex57 := position, tokenIndex
									if !_rules[ruleSP]() {
										goto l57
									}
									goto l58
								l57:
									position, tokenIndex = position57, tokenIndex57
								}
							l58:
								goto l52
							l53:
								position, tokenIndex = position53, tokenIndex53
							}
							if !_rules[ruleSP]() {
								goto l50
							}
							{
								position59, tokenIndex59 := position, tokenIndex
								if buffer[position] != rune(':') {
									goto l59
								}
								position++
								if !_rules[ruleSP]() {
									goto l59
								}
								{
									position61, tokenIndex61 := position, tokenIndex
									{
										position63 := position
										if buffer[position] != rune('d') {
											goto l62
										}
										position++
										if buffer[position] != rune('e') {
											goto l62
										}
										position++
										if buffer[position] != rune('l') {
											goto l62
										}
										position++
										if buffer[position] != rune('a') {
											goto l62
										}
										position++
										if buffer[position] != rune('y') {
											goto l62
										}
										position++
										if buffer[position] != rune('=') {
											goto l62
										}
										position++
										{
											position64 := position
											{
												position65 := position
												if c := buffer[position]; c < rune('0') || c > rune('9') {
													goto l62
												}
												position++
											l66:
												{
													position67, tokenIndex67 := position, tokenIndex
													if c := buffer[position]; c < rune('0') || c > rune('9') {
														goto l67
													}
													position++
													goto l66
												l67:
													position, tokenIndex = position67, tokenIndex67
												}
												{
													switch buffer[position] {
													case 'd':
														if buffer[position] != rune('d') {
															goto l62
														}
														position++
													case 'h':
														if buffer[position] != rune('h') {
															goto l62
														}
														position++
													case 'm':
														if buffer[position] != rune('m') {
															goto l62
														}
														position++
													default:
														if buffer[position] != rune('s') {
															goto l62
														}
														position++
													}
												}

												add(rulePegText, position65)
											}
											add(ruleDuration, position64)
										}
										{
											add(ruleAction10, position)
										}
										add(ruleDelay, position63)
									}
									goto l61
								l62:
									position, tokenIndex = position61, tokenIndex61
									{
										position70 := position
										{
											position71 := position
											{
												position72 := position
												{
													position73, tokenIndex73 := position, tokenIndex
													if !_rules[ruleidentifier]() {
														goto l73
													}
													if buffer[position] != rune('.') {
														goto l73
													}
													position++
													goto l74
												l73:
													position, tokenIndex = position73, tokenIndex73
												}
											l74:
												if !_rules[ruleidentifier]() {
													goto l59
												}
												add(rulePegText, position72)
											}
											{
												add(ruleAction15, position)
											}
											add(ruleHandlerName, position71)
										}
										{
											position76, tokenIndex76 := position, tokenIndex
											{
												position78 := position
												if buffer[position] != rune('(') {
													goto l76
												}
												position++
												{
													position79, tokenIndex79 := position, tokenIndex
													if !_rules[ruleParam]() {
														goto l79
													}
												l81:
													{
														position82, tokenIndex82 := position, tokenIndex
														if buffer[position] != rune(',') {
															goto l82
														}
														position++
														if !_rules[ruleSP]() {
															goto l82
														}
														if !_rules[ruleParam]() {
															goto l82
														}
														goto l81
													l82:
														position, tokenIndex = position82, tokenIndex82
													}
													goto l80
												l79:
													position, tokenIndex = position79, tokenIndex79
												}
											l80:
												if buffer[position] != rune(')') {
													goto l76
												}
												position++
												add(ruleHandlerParams, position78)
											}
											goto l77
										l76:
											position, tokenIndex = position76, tokenIndex76
										}
									l77:
										add(ruleHandler, position70)
									}
								}
							l61:
								goto l60
							l59:
								position, tokenIndex = position59, tokenIndex59
							}
						l60:
							if !_rules[ruleNL]() {
								goto l50
							}
							{
								add(ruleAction17, position)
							}
							add(ruleState, position51)
						}
						goto l5
					l50:
						position, tokenIndex = position5, tokenIndex5
						{
							position85 := position
							if buffer[position] != rune('!') {
								goto l84
							}
							position++
							if buffer[position] != rune('t') {
								goto l84
							}
							position++
							if buffer[position] != rune('h') {
								goto l84
							}
							position++
							if buffer[position] != rune('e') {
								goto l84
							}
							position++
							if buffer[position] != rune('m') {
								goto l84
							}
							position++
							if buffer[position] != rune('e') {
								goto l84
							}
							position++
							if !_rules[ruleSP]() {
								goto l84
							}
							if !_rules[ruleanySequence]() {
								goto l84
							}
							if !_rules[ruleSP]() {
								goto l84
							}
							if !_rules[ruleNL]() {
								goto l84
							}
							add(ruleTheme, position85)
						}
						goto l5
					l84:
						position, tokenIndex = position5, tokenIndex5
						{
							switch buffer[position] {
							case '\'':
								{
									position87 := position
									if buffer[position] != rune('\'') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									if !_rules[ruleanySequence]() {
										goto l4
									}
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleComment, position87)
								}
							case '!':
								{
									position88 := position
									if buffer[position] != rune('!') {
										goto l4
									}
									position++
									if buffer[position] != rune('$') {
										goto l4
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l4
									}
									if !_rules[ruleSP]() {
										goto l4
									}
									if buffer[position] != rune('=') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									{
										position89, tokenIndex89 := position, tokenIndex
										if buffer[position] != rune('"') {
											goto l89
										}
										position++
										goto l90
									l89:
										position, tokenIndex = position89, tokenIndex89
									}
								l90:
									if !_rules[ruleanySequence]() {
										goto l4
									}
								l91:
									{
										position92, tokenIndex92 := position, tokenIndex
										if !_rules[ruleanySequence]() {
											goto l92
										}
										goto l91
									l92:
										position, tokenIndex = position92, tokenIndex92
									}
									{
										position93, tokenIndex93 := position, tokenIndex
										if buffer[position] != rune('"') {
											goto l93
										}
										position++
										goto l94
									l93:
										position, tokenIndex = position93, tokenIndex93
									}
								l94:
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleVar, position88)
								}
							case 's':
								{
									position95 := position
									if buffer[position] != rune('s') {
										goto l4
									}
									position++
									if buffer[position] != rune('k') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('n') {
										goto l4
									}
									position++
									if buffer[position] != rune('p') {
										goto l4
									}
									position++
									if buffer[position] != rune('a') {
										goto l4
									}
									position++
									if buffer[position] != rune('r') {
										goto l4
									}
									position++
									if buffer[position] != rune('a') {
										goto l4
									}
									position++
									if buffer[position] != rune('m') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									if !_rules[ruleanySequence]() {
										goto l4
									}
									if !_rules[ruleSP]() {
										goto l4
									}
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleSkinparam, position95)
								}
							case 'h':
								{
									position96 := position
									if buffer[position] != rune('h') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('d') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if buffer[position] != rune(' ') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if buffer[position] != rune('m') {
										goto l4
									}
									position++
									if buffer[position] != rune('p') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('y') {
										goto l4
									}
									position++
									if buffer[position] != rune(' ') {
										goto l4
									}
									position++
									if buffer[position] != rune('d') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if buffer[position] != rune('s') {
										goto l4
									}
									position++
									if buffer[position] != rune('c') {
										goto l4
									}
									position++
									if buffer[position] != rune('r') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('p') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('o') {
										goto l4
									}
									position++
									if buffer[position] != rune('n') {
										goto l4
									}
									position++
									if !_rules[ruleNL]() {
										goto l4
									}
									add(ruleHideEmptyDescription, position96)
								}
							default:
								{
									position97 := position
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('i') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('l') {
										goto l4
									}
									position++
									if buffer[position] != rune('e') {
										goto l4
									}
									position++
									if !_rules[ruleSP]() {
										goto l4
									}
									{
										position98 := position
										if !_rules[ruleanySequence]() {
											goto l4
										}
										add(rulePegText, position98)
									}
									if !_rules[ruleNL]() {
										goto l4
									}
									{
										add(ruleAction2, position)
									}
									add(ruleTitle, position97)
								}
							}
						}

					}
				l5:
					goto l3
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				{
					position100 := position
					if buffer[position] != rune('@') {
						goto l0
					}
					position++
					if buffer[position] != rune('e') {
						goto l0
					}
					position++
					if buffer[position] != rune('n') {
						goto l0
					}
					position++
					if buffer[position] != rune('d') {
						goto l0
					}
					position++
					if buffer[position] != rune('u') {
						goto l0
					}
					position++
					if buffer[position] != rune('m') {
						goto l0
					}
					position++
					if buffer[position] != rune('l') {
						goto l0
					}
					position++
					if !_rules[ruleNL]() {
						goto l0
					}
					add(ruleEnd, position100)
				}
				{
					position101, tokenIndex101 := position, tokenIndex
					if !matchDot() {
						goto l101
					}
					goto l0
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
				add(ruleStateDiagram, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 identifier <- <((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))+> */
		func() bool {
			position102, tokenIndex102 := position, tokenIndex
			{
				position103 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l102
						}
						position++
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l102
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l102
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l102
						}
						position++
					}
				}

			l104:
				{
					position105, tokenIndex105 := position, tokenIndex
					{
						switch buffer[position] {
						case '_':
							if buffer[position] != rune('_') {
								goto l105
							}
							position++
						case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l105
							}
							position++
						case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l105
							}
							position++
						default:
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l105
							}
							position++
						}
					}

					goto l104
				l105:
					position, tokenIndex = position105, tokenIndex105
				}
				add(ruleidentifier, position103)
			}
			return true
		l102:
			position, tokenIndex = position102, tokenIndex102
			return false
		},
		/* 2 anyChar <- <(!([:->] / ((&('/') '/') | (&('\t') '\t') | (&('<') '<') | (&(' ') ' ') | (&('\n') '\n') | (&('\r') '\r'))) .)> */
		func() bool {
			position108, tokenIndex108 := position, tokenIndex
			{
				position109 := position
				{
					position110, tokenIndex110 := position, tokenIndex
					{
						position111, tokenIndex111 := position, tokenIndex
						if c := buffer[position]; c < rune(':') || c > rune('>') {
							goto l112
						}
						position++
						goto l111
					l112:
						position, tokenIndex = position111, tokenIndex111
						{
							switch buffer[position] {
							case '/':
								if buffer[position] != rune('/') {
									goto l110
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l110
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l110
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l110
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l110
								}
								position++
							default:
								if buffer[position] != rune('\r') {
									goto l110
								}
								position++
							}
						}

					}
				l111:
					goto l108
				l110:
					position, tokenIndex = position110, tokenIndex110
				}
				if !matchDot() {
					goto l108
				}
				add(ruleanyChar, position109)
			}
			return true
		l108:
			position, tokenIndex = position108, tokenIndex108
			return false
		},
		/* 3 anySequence <- <(!('\r' / '\n') .)+> */
		func() bool {
			position114, tokenIndex114 := position, tokenIndex
			{
				position115 := position
				{
					position118, tokenIndex118 := position, tokenIndex
					{
						position119, tokenIndex119 := position, tokenIndex
						if buffer[position] != rune('\r') {
							goto l120
						}
						position++
						goto l119
					l120:
						position, tokenIndex = position119, tokenIndex119
						if buffer[position] != rune('\n') {
							goto l118
						}
						position++
					}
				l119:
					goto l114
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
				if !matchDot() {
					goto l114
				}
			l116:
				{
					position117, tokenIndex117 := position, tokenIndex
					{
						position121, tokenIndex121 := position, tokenIndex
						{
							position122, tokenIndex122 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l123
							}
							position++
							goto l122
						l123:
							position, tokenIndex = position122, tokenIndex122
							if buffer[position] != rune('\n') {
								goto l121
							}
							position++
						}
					l122:
						goto l117
					l121:
						position, tokenIndex = position121, tokenIndex121
					}
					if !matchDot() {
						goto l117
					}
					goto l116
				l117:
					position, tokenIndex = position117, tokenIndex117
				}
				add(ruleanySequence, position115)
			}
			return true
		l114:
			position, tokenIndex = position114, tokenIndex114
			return false
		},
		/* 4 NL <- <(('\r' '\n') / '\n')*> */
		func() bool {
			{
				position125 := position
			l126:
				{
					position127, tokenIndex127 := position, tokenIndex
					{
						position128, tokenIndex128 := position, tokenIndex
						if buffer[position] != rune('\r') {
							goto l129
						}
						position++
						if buffer[position] != rune('\n') {
							goto l129
						}
						position++
						goto l128
					l129:
						position, tokenIndex = position128, tokenIndex128
						if buffer[position] != rune('\n') {
							goto l127
						}
						position++
					}
				l128:
					goto l126
				l127:
					position, tokenIndex = position127, tokenIndex127
				}
				add(ruleNL, position125)
			}
			return true
		},
		/* 5 SP <- <((&('\\') ('\\' 'n')) | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position131 := position
			l132:
				{
					position133, tokenIndex133 := position, tokenIndex
					{
						switch buffer[position] {
						case '\\':
							if buffer[position] != rune('\\') {
								goto l133
							}
							position++
							if buffer[position] != rune('n') {
								goto l133
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l133
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l133
							}
							position++
						}
					}

					goto l132
				l133:
					position, tokenIndex = position133, tokenIndex133
				}
				add(ruleSP, position131)
			}
			return true
		},
		/* 6 Word <- <(<anyChar+> Action0)> */
		func() bool {
			position135, tokenIndex135 := position, tokenIndex
			{
				position136 := position
				{
					position137 := position
					if !_rules[ruleanyChar]() {
						goto l135
					}
				l138:
					{
						position139, tokenIndex139 := position, tokenIndex
						if !_rules[ruleanyChar]() {
							goto l139
						}
						goto l138
					l139:
						position, tokenIndex = position139, tokenIndex139
					}
					add(rulePegText, position137)
				}
				{
					add(ruleAction0, position)
				}
				add(ruleWord, position136)
			}
			return true
		l135:
			position, tokenIndex = position135, tokenIndex135
			return false
		},
		/* 7 Tag <- <('<' '<' <identifier> ('>' '>') Action1)> */
		nil,
		/* 8 Duration <- <<([0-9]+ ((&('d') 'd') | (&('h') 'h') | (&('m') 'm') | (&('s') 's')))>> */
		nil,
		/* 9 Title <- <('t' 'i' 't' 'l' 'e' SP <anySequence> NL Action2)> */
		nil,
		/* 10 Name <- <('!' '$' 'n' 'a' 'm' 'e' SP '=' SP '"' <identifier> '"' NL Action3)> */
		nil,
		/* 11 Version <- <('!' '$' 'v' 'e' 'r' 's' 'i' 'o' 'n' SP '=' SP '"'? <([0-9]+ . [0-9]+)> '"'? NL Action4)> */
		nil,
		/* 12 HideEmptyDescription <- <('h' 'i' 'd' 'e' ' ' 'e' 'm' 'p' 't' 'y' ' ' 'd' 'e' 's' 'c' 'r' 'i' 'p' 't' 'i' 'o' 'n' NL)> */
		nil,
		/* 13 Theme <- <('!' 't' 'h' 'e' 'm' 'e' SP anySequence SP NL)> */
		nil,
		/* 14 Skinparam <- <('s' 'k' 'i' 'n' 'p' 'a' 'r' 'a' 'm' SP anySequence SP NL)> */
		nil,
		/* 15 StateSkin <- <('s' 't' 'a' 't' 'e' SP StateName SP '#' anyChar+ NL)> */
		nil,
		/* 16 Var <- <('!' '$' identifier SP '=' SP '"'? anySequence+ '"'? NL)> */
		nil,
		/* 17 Comment <- <('\'' SP anySequence NL)> */
		nil,
		/* 18 Start <- <('@' 's' 't' 'a' 'r' 't' 'u' 'm' 'l' NL)> */
		nil,
		/* 19 End <- <('@' 'e' 'n' 'd' 'u' 'm' 'l' NL)> */
		nil,
		/* 20 Arr <- <('-' '>')> */
		func() bool {
			position154, tokenIndex154 := position, tokenIndex
			{
				position155 := position
				if buffer[position] != rune('-') {
					goto l154
				}
				position++
				if buffer[position] != rune('>') {
					goto l154
				}
				position++
				add(ruleArr, position155)
			}
			return true
		l154:
			position, tokenIndex = position154, tokenIndex154
			return false
		},
		/* 21 DoubleArr <- <('-' Arr)> */
		func() bool {
			position156, tokenIndex156 := position, tokenIndex
			{
				position157 := position
				if buffer[position] != rune('-') {
					goto l156
				}
				position++
				if !_rules[ruleArr]() {
					goto l156
				}
				add(ruleDoubleArr, position157)
			}
			return true
		l156:
			position, tokenIndex = position156, tokenIndex156
			return false
		},
		/* 22 TripleArr <- <('-' DoubleArr)> */
		nil,
		/* 23 DirectionArr <- <('-' Direction Arr)> */
		nil,
		/* 24 BackArr <- <('<' '-')> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				if buffer[position] != rune('<') {
					goto l160
				}
				position++
				if buffer[position] != rune('-') {
					goto l160
				}
				position++
				add(ruleBackArr, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 25 DoubleBackArr <- <(BackArr '-')> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				if !_rules[ruleBackArr]() {
					goto l162
				}
				if buffer[position] != rune('-') {
					goto l162
				}
				position++
				add(ruleDoubleBackArr, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 26 TripleBackArr <- <(DoubleBackArr '-')> */
		nil,
		/* 27 DirectionBackArr <- <(BackArr Direction '-')> */
		nil,
		/* 28 Arrow <- <(Arr / DoubleArr / TripleArr / DirectionArr)> */
		nil,
		/* 29 BackArrow <- <(BackArr / DoubleBackArr / TripleBackArr / DirectionBackArr)> */
		nil,
		/* 30 Direction <- <(('u' 'p') / ('d' 'o' 'w' 'n') / ('r' 'i' 'g' 'h' 't') / ('l' 'e' 'f' 't') / ((&('d') 'd') | (&('u') 'u') | (&('r') 'r') | (&('l') 'l')))> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				{
					position170, tokenIndex170 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l171
					}
					position++
					if buffer[position] != rune('p') {
						goto l171
					}
					position++
					goto l170
				l171:
					position, tokenIndex = position170, tokenIndex170
					if buffer[position] != rune('d') {
						goto l172
					}
					position++
					if buffer[position] != rune('o') {
						goto l172
					}
					position++
					if buffer[position] != rune('w') {
						goto l172
					}
					position++
					if buffer[position] != rune('n') {
						goto l172
					}
					position++
					goto l170
				l172:
					position, tokenIndex = position170, tokenIndex170
					if buffer[position] != rune('r') {
						goto l173
					}
					position++
					if buffer[position] != rune('i') {
						goto l173
					}
					position++
					if buffer[position] != rune('g') {
						goto l173
					}
					position++
					if buffer[position] != rune('h') {
						goto l173
					}
					position++
					if buffer[position] != rune('t') {
						goto l173
					}
					position++
					goto l170
				l173:
					position, tokenIndex = position170, tokenIndex170
					if buffer[position] != rune('l') {
						goto l174
					}
					position++
					if buffer[position] != rune('e') {
						goto l174
					}
					position++
					if buffer[position] != rune('f') {
						goto l174
					}
					position++
					if buffer[position] != rune('t') {
						goto l174
					}
					position++
					goto l170
				l174:
					position, tokenIndex = position170, tokenIndex170
					{
						switch buffer[position] {
						case 'd':
							if buffer[position] != rune('d') {
								goto l168
							}
							position++
						case 'u':
							if buffer[position] != rune('u') {
								goto l168
							}
							position++
						case 'r':
							if buffer[position] != rune('r') {
								goto l168
							}
							position++
						default:
							if buffer[position] != rune('l') {
								goto l168
							}
							position++
						}
					}

				}
			l170:
				add(ruleDirection, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 31 TerminalState <- <('[' '*' ']')> */
		func() bool {
			position176, tokenIndex176 := position, tokenIndex
			{
				position177 := position
				if buffer[position] != rune('[') {
					goto l176
				}
				position++
				if buffer[position] != rune('*') {
					goto l176
				}
				position++
				if buffer[position] != rune(']') {
					goto l176
				}
				position++
				add(ruleTerminalState, position177)
			}
			return true
		l176:
			position, tokenIndex = position176, tokenIndex176
			return false
		},
		/* 32 StateFrom <- <((TerminalState Action5) / (Word Action6))> */
		func() bool {
			position178, tokenIndex178 := position, tokenIndex
			{
				position179 := position
				{
					position180, tokenIndex180 := position, tokenIndex
					if !_rules[ruleTerminalState]() {
						goto l181
					}
					{
						add(ruleAction5, position)
					}
					goto l180
				l181:
					position, tokenIndex = position180, tokenIndex180
					if !_rules[ruleWord]() {
						goto l178
					}
					{
						add(ruleAction6, position)
					}
				}
			l180:
				add(ruleStateFrom, position179)
			}
			return true
		l178:
			position, tokenIndex = position178, tokenIndex178
			return false
		},
		/* 33 StateTo <- <((TerminalState Action7) / (Word Action8))> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				{
					position186, tokenIndex186 := position, tokenIndex
					if !_rules[ruleTerminalState]() {
						goto l187
					}
					{
						add(ruleAction7, position)
					}
					goto l186
				l187:
					position, tokenIndex = position186, tokenIndex186
					if !_rules[ruleWord]() {
						goto l184
					}
					{
						add(ruleAction8, position)
					}
				}
			l186:
				add(ruleStateTo, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 34 StateName <- <(Word Action9)> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if !_rules[ruleWord]() {
					goto l190
				}
				{
					add(ruleAction9, position)
				}
				add(ruleStateName, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 35 Delay <- <('d' 'e' 'l' 'a' 'y' '=' Duration Action10)> */
		nil,
		/* 36 contextVarPath <- <('c' 't' 'x' ('.' identifier)+)> */
		nil,
		/* 37 ParamName <- <(<identifier> Action11)> */
		nil,
		/* 38 ParamValue <- <(SP '=' SP '"' <(!'"' .)+> '"' Action12)> */
		nil,
		/* 39 ParamValueFromContext <- <(SP '=' SP <contextVarPath> Action13)> */
		nil,
		/* 40 Param <- <(ParamName (ParamValueFromContext / ParamValue)? Action14)> */
		func() bool {
			position198, tokenIndex198 := position, tokenIndex
			{
				position199 := position
				{
					position200 := position
					{
						position201 := position
						if !_rules[ruleidentifier]() {
							goto l198
						}
						add(rulePegText, position201)
					}
					{
						add(ruleAction11, position)
					}
					add(ruleParamName, position200)
				}
				{
					position203, tokenIndex203 := position, tokenIndex
					{
						position205, tokenIndex205 := position, tokenIndex
						{
							position207 := position
							if !_rules[ruleSP]() {
								goto l206
							}
							if buffer[position] != rune('=') {
								goto l206
							}
							position++
							if !_rules[ruleSP]() {
								goto l206
							}
							{
								position208 := position
								{
									position209 := position
									if buffer[position] != rune('c') {
										goto l206
									}
									position++
									if buffer[position] != rune('t') {
										goto l206
									}
									position++
									if buffer[position] != rune('x') {
										goto l206
									}
									position++
									if buffer[position] != rune('.') {
										goto l206
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l206
									}
								l210:
									{
										position211, tokenIndex211 := position, tokenIndex
										if buffer[position] != rune('.') {
											goto l211
										}
										position++
										if !_rules[ruleidentifier]() {
											goto l211
										}
										goto l210
									l211:
										position, tokenIndex = position211, tokenIndex211
									}
									add(rulecontextVarPath, position209)
								}
								add(rulePegText, position208)
							}
							{
								add(ruleAction13, position)
							}
							add(ruleParamValueFromContext, position207)
						}
						goto l205
					l206:
						position, tokenIndex = position205, tokenIndex205
						{
							position213 := position
							if !_rules[ruleSP]() {
								goto l203
							}
							if buffer[position] != rune('=') {
								goto l203
							}
							position++
							if !_rules[ruleSP]() {
								goto l203
							}
							if buffer[position] != rune('"') {
								goto l203
							}
							position++
							{
								position214 := position
								{
									position217, tokenIndex217 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l217
									}
									position++
									goto l203
								l217:
									position, tokenIndex = position217, tokenIndex217
								}
								if !matchDot() {
									goto l203
								}
							l215:
								{
									position216, tokenIndex216 := position, tokenIndex
									{
										position218, tokenIndex218 := position, tokenIndex
										if buffer[position] != rune('"') {
											goto l218
										}
										position++
										goto l216
									l218:
										position, tokenIndex = position218, tokenIndex218
									}
									if !matchDot() {
										goto l216
									}
									goto l215
								l216:
									position, tokenIndex = position216, tokenIndex216
								}
								add(rulePegText, position214)
							}
							if buffer[position] != rune('"') {
								goto l203
							}
							position++
							{
								add(ruleAction12, position)
							}
							add(ruleParamValue, position213)
						}
					}
				l205:
					goto l204
				l203:
					position, tokenIndex = position203, tokenIndex203
				}
			l204:
				{
					add(ruleAction14, position)
				}
				add(ruleParam, position199)
			}
			return true
		l198:
			position, tokenIndex = position198, tokenIndex198
			return false
		},
		/* 41 HandlerName <- <(<((identifier '.')? identifier)> Action15)> */
		nil,
		/* 42 HandlerParams <- <('(' (Param (',' SP Param)*)? ')')> */
		nil,
		/* 43 Handler <- <(HandlerName HandlerParams?)> */
		nil,
		/* 44 EventName <- <('[' <identifier> ']' Action16)> */
		nil,
		/* 45 State <- <('s' 't' 'a' 't' 'e' SP StateName SP (Tag SP?)* SP (':' SP (Delay / Handler))? NL Action17)> */
		nil,
		/* 46 Transition <- <(((StateFrom SP Arrow SP StateTo) / (StateTo SP BackArrow SP StateFrom)) SP (':' SP EventName)? NL Action18)> */
		nil,
		nil,
		/* 49 Action0 <- <{ p.word = text }> */
		nil,
		/* 50 Action1 <- <{ p.AddTag(text) }> */
		nil,
		/* 51 Action2 <- <{ p.Title = text }> */
		nil,
		/* 52 Action3 <- <{ p.setName(text) }> */
		nil,
		/* 53 Action4 <- <{ p.setVersion(text) }> */
		nil,
		/* 54 Action5 <- <{ p.stateFrom = "START" }> */
		nil,
		/* 55 Action6 <- <{ p.stateFrom = p.word }> */
		nil,
		/* 56 Action7 <- <{ p.stateTo = "END" }> */
		nil,
		/* 57 Action8 <- <{ p.stateTo = p.word }> */
		nil,
		/* 58 Action9 <- <{ p.stateName = p.word }> */
		nil,
		/* 59 Action10 <- <{ p.delay = text }> */
		nil,
		/* 60 Action11 <- <{ p.paramName = text }> */
		nil,
		/* 61 Action12 <- <{ p.paramValue = text }> */
		nil,
		/* 62 Action13 <- <{ p.contextVarPath = text }> */
		nil,
		/* 63 Action14 <- <{ p.appendParam() }> */
		nil,
		/* 64 Action15 <- <{ p.handlerName = text }> */
		nil,
		/* 65 Action16 <- <{ p.eventName = text}> */
		nil,
		/* 66 Action17 <- <{
		    dto := &AddStateDto {
		        StateName: p.stateName,
		        Handler: p.handlerName,
		        Params: p.params,
		    }
		    p.AddState(dto);
		    p.clearState()
		}> */
		nil,
		/* 67 Action18 <- <{
		    dto := &AddTransitionDto {
		        StateFrom: p.stateFrom,
		        StateTo: p.stateTo,
		        Event: p.eventName,
		    }
		    p.AddTransition(dto);
		    p.clearState()
		}> */
		nil,
	}
	p.rules = _rules
	return nil
}
