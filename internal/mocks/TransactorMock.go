// Code generated by MockGen. DO NOT EDIT.
// Source: ../domain/interfaces.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=../domain/interfaces.go -destination=TransactorMock.go -mock_names=Transactor=TransactorMock
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// TransactorMock is a mock of Transactor interface.
type TransactorMock struct {
	ctrl     *gomock.Controller
	recorder *TransactorMockMockRecorder
}

// TransactorMockMockRecorder is the mock recorder for TransactorMock.
type TransactorMockMockRecorder struct {
	mock *TransactorMock
}

// NewTransactorMock creates a new mock instance.
func NewTransactorMock(ctrl *gomock.Controller) *TransactorMock {
	mock := &TransactorMock{ctrl: ctrl}
	mock.recorder = &TransactorMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *TransactorMock) EXPECT() *TransactorMockMockRecorder {
	return m.recorder
}

// Transaction mocks base method.
func (m *TransactorMock) Transaction(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *TransactorMockMockRecorder) Transaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*TransactorMock)(nil).Transaction), ctx, fn)
}
