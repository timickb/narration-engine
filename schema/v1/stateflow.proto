syntax = "proto3";
import "types.proto";

package schema.v1;

option go_package = "github.com/timickb/narration-engine/proto/gen/stateflow;stateflow";

// Stateflow - сервис конечных автоматов.
service StateflowService {
  // Start - создать и запустить на выполнение экземпляр сценария.
  rpc Start(StartRequest) returns (StartResponse);
  // SendEvent - отправить событие в экземпляр сценария.
  rpc SendEvent(SendEventRequest) returns (SendEventResponse);
  // GetState - получить информацию о состоянии экземпляра сценария.
  rpc GetState(GetStateRequest) returns (GetStateResponse);
}

// StartRequest - запрос запуска экземпляра сценария
message StartRequest {
  // scenario_name - название сценария
  string scenario_name = 1;
  // scenario_version - версия сценария
  string scenario_version = 2;
  // blocking_key - блокирующий идентификатор
  optional string blocking_key = 3;
  // context - json-строка с параметрами, которые нужно положить в контекст экземпляра.
  string context = 4;
}

// StartResponse - ответ на запрос запуска экземпляра сценария.
message StartResponse {
  // status - статус ответа.
  Status status = 1;
  // instance_id - uuid запущенного экземпляра.
  string instance_id = 2;
  // event_id - идентификатор события старта экземпляра.
  string event_id = 3;
}

// SendEventRequest - запрос отправки события в экземпляр.
message SendEventRequest {
  // instance_id - uuid экземпляра.
  string instance_id = 1;
  // event - название события
  string event = 2;
  // event_params - параметры, которые нужно положить в контекст с событием.
  string event_params = 3;
}

// SendEventResponse - ответ на SendEventRequest.
message SendEventResponse {
  // status - статус ответа.
  Status status = 1;
  // event_id - идентификатор события.
  string event_id = 2;
  // context - текущее состояние контекста экземпляра (json)
  string context = 3;
}

// GetStateRequest - запрос получения состояния экземпляра.
message GetStateRequest {
  // instance_id - uuid экземпляра.
  string instance_id = 1;
}

// GetStateResponse - ответ на GetStateRequest.
message GetStateResponse {
  // status - статус ответа.
  Status status = 1;
  // state - состояние экземпляра.
  State state = 2;
}
